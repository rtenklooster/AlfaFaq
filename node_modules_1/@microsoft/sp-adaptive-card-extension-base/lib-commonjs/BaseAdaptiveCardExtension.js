"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseAdaptiveCardExtension = void 0;
var tslib_1 = require("tslib");
var sp_component_base_1 = require("@microsoft/sp-component-base");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_lodash_subset_1 = require("@microsoft/sp-lodash-subset");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_component_base_2 = require("@microsoft/sp-component-base");
var actionButtonHelper_1 = require("./ac-template/util/actionButtonHelper");
var getCardRenderParameters_1 = require("./ac-template/util/getCardRenderParameters");
var CacheManager_1 = require("./caching/CacheManager");
var Flights_1 = require("./common/Flights");
var DefaultCardView_1 = require("./views/card/DefaultCardView");
var QuickViewNavigator_1 = require("./views/navigator/QuickViewNavigator");
var ViewNavigator_1 = require("./views/navigator/ViewNavigator");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var Killswitches_1 = require("./common/Killswitches");
var LocalStorageACECache_1 = require("./caching/cache/LocalStorageACECache");
var DEFAULT_CARD_SIZE = 'Medium';
var DEFAULT_VIEW_ID = '_InternalDefaultCardView';
var DEFAULT_ASYNC_RENDER_COMPLETED_TIMEOUT_TIME = 15000; // 15 seconds
// tslint:disable:member-ordering Disable for this file so we can group public/internal APIs together
/**
 * Base class for Adaptive Card Extensions.
 *
 * @remarks Adaptive Card Extensions must inherit from this class.
 *
 * @public
 */
var BaseAdaptiveCardExtension = /** @class */ (function (_super) {
    tslib_1.__extends(BaseAdaptiveCardExtension, _super);
    function BaseAdaptiveCardExtension() {
        var _this = _super.call(this) || this;
        _this._isLoggedRenderPerf = false;
        // Set to true after onInit is called by the loader
        _this._isInitialized = false;
        _this._isInitializedWithLKG = false;
        // #endregion
        // #region Private
        _this._getCard = function (updateOnlyData) {
            try {
                return (0, getCardRenderParameters_1.getCardRenderParameters)(_this._cardNavigator._currentView, _this.cardSize, _this.context.deviceContext, updateOnlyData ? _this._ACRenderArgs.card.template : undefined, _this.iconProperty, _this.title);
            }
            catch (error) {
                _this.context._host.onError(error.toString());
                throw error;
            }
        };
        _this._onViewInitialized = function (view) {
            view._state = _this.state;
            view._ace = _this;
            view._properties = _this.properties;
            view._getCardSize = function () { return _this.cardSize; };
            view._context = _this.context;
        };
        _this._navigatorCallback = function (skipUpdate) {
            if (!skipUpdate) {
                _this.update(_this._renderType);
            }
        };
        _this._closeQuickViewCallback = function () {
            _this.context._host.requestRenderTypeChange('Card', _this.instanceId);
        };
        _this._cardSize = DEFAULT_CARD_SIZE;
        _this._renderType = 'Card';
        _this._isVisible = true;
        _this._urlParams = new URLSearchParams(window.location.search);
        _this._cardNavigator = new ViewNavigator_1.ViewNavigator(_this._navigatorCallback, _this._onViewInitialized);
        _this._quickViewNavigator = new QuickViewNavigator_1.QuickViewNavigator(_this._navigatorCallback, _this._onViewInitialized, _this._closeQuickViewCallback);
        return _this;
    }
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "cardNavigator", {
        // #region Getters
        /**
         * The {@link ViewNavigator} for the Card view.
         *
         * @readonly
         */
        get: function () {
            return this._cardNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "cardSize", {
        /**
         * The current {@link CardSize}.
         *
         * @readonly
         */
        get: function () {
            return this._cardSize;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "dataVersion", {
        /**
         * The value of this property is stored in the serialized data of the Adaptive Card Extension. It can be used to
         * manage versioning of the Adaptive Card Extension.
         *
         * @remarks The default version is 1.0.
         *
         * @readonly
         */
        get: function () {
            return sp_core_library_1.Version.parse('1.0');
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "description", {
        /**
         * The description of the Adaptive Card Extension defined in the manifest.
         *
         * @readonly
         */
        get: function () {
            return this._description;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "displayMode", {
        /**
         * The current {@link @microsoft/sp-core-library#DisplayMode}.
         *
         * @readonly
         */
        get: function () {
            return this._displayMode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "properties", {
        /**
         * The custom, persisted properties of the Adaptive Card Extension.
         *
         * @readonly
         */
        get: function () {
            return this._properties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "quickViewNavigator", {
        /**
         * {@link QuickViewNavigator} is a {@link ViewNavigator} for the Quick view.
         *
         * @readonly
         */
        get: function () {
            return this._quickViewNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "renderedFromPersistedData", {
        /**
         * Indicates whether the Adaptive Card Extension was rendered from persisted data or
         * initialized from a default state.
         *
         * @readonly
         */
        get: function () {
            return this._renderedFromPersistedData;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "renderedOnce", {
        /**
         * Indicates whether the Adaptive Card Extension has initially rendered.
         *
         * @readonly
         */
        get: function () {
            return this._renderedOnce;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "renderType", {
        /**
         * The current {@link RenderType}.
         *
         * @readonly
         */
        get: function () {
            return this._renderType;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "propertiesMetadata", {
        /**
         * This property defines metadata for the Adaptive Card Extension property bag. The metadata can help SharePoint understand
         * the content of the properties better and perform relevant services on the data.
         *
         * @remarks See {@link IAdaptiveCardExtensionPropertiesMetadata} for more information about how to define metadata.
         *
         * @virtual
         */
        get: function () {
            return undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "isRenderAsync", {
        /**
         * Indicates whether the ACE is rendering in async mode.
         *
         * @remarks
         * If the ACE overrides this field to return true, then it needs to call renderCompleted API after the ACE finishes initializing.
         *
         * The default value is false.
         *
         * @beta
         */
        get: function () {
            return false;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "state", {
        /**
         * Gets the custom state of the Adaptive Card Extension.
         *
         * @remarks This property is automatically shared across registered Views.
         *
         * @remarks This property can only be initialized once, and should be done in the constructor or {@link onInit}.
         *
         * @remarks If this property is not initialized, {@link BaseAdaptiveCardExtension.setState} cannot be called.
         *
         * @readonly
         */
        get: function () {
            return this._state;
        },
        set: function (initialState) {
            if (this._state) {
                throw new Error('state can only be initialized once');
            }
            this._state = initialState;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "title", {
        // #endregion
        // #region Public Virtual Methods
        /**
         * This value is displayed in Card and Quick view unless it is explicitly overridden by the Views.
         * It is also displayed as the Property Pane title.
         *
         * @remarks By default, this will return the title defined in the manifest.
         *
         * @virtual
         */
        get: function () {
            return this._title;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "iconProperty", {
        /**
         * The icon url used to render an icon on the Card view.
         *
         * @remarks By default, this will return the iconImageUrl defined in the manifest.
         *
         * @virtual
         */
        get: function () {
            return this._iconProperty;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Get the Property Pane configuration for this Adaptive Card Extension. If an Adaptive Card Extension
     * wants to use the Property Pane, then this method must be overriden.
     *
     * @remarks Property Pane resources can be defer loaded to reduce bundle size. See {@link BaseAdaptiveCardExtension.loadPropertyPaneResources}.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.getPropertyPaneConfiguration = function () {
        return {
            pages: []
        };
    };
    /**
     * API to enable asynchronous loading of Property Pane related resources of the Adaptive Card Extension.
     *
     * @remarks No Property Pane APIs will be called before this method resolves.
     *
     * @remarks No Property Pane events will be raised until this method resolves except for `PropertyPaneConfigurationComplete`,
     * which can be used to clean up any pending resources.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.loadPropertyPaneResources = function () {
        return Promise.resolve();
    };
    /**
     * Override the default cache settings.
     *
     * @beta
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.getCacheSettings = function () {
        return {};
    };
    /**
     * This virtual method returns a subset of the state object that will be cached by the client.
     *
     * @remarks If not overriden, this will return an empty object.
     * @param state - A shallow clone of the AdaptiveCardExtension state object.
     *
     * @beta
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.getCachedState = function (state) {
        return {};
    };
    /**
     * Pass the action arguments onto the current view to handle.
     *
     * @param action - The {@link IBaseActionArguments} for the current event.
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalOnAction = function (action) {
        this.navigator._currentView.onAction(action);
    };
    /**
     * Pass the action error arguments onto the current view to handle.
     *
     * @param actionError - The {@link IBaseActionErrorArguments} for the current event.
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalOnActionError = function (actionError) {
        this.navigator._currentView.onActionError(actionError);
    };
    /**
     * Lifecycle method called before serialization.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.onBeforeSerialize = function () {
        /* EMPTY BLOCK */
    };
    /**
     * Lifecycle method called after the Adaptive Card Extension's properties have been
     * updated by a source other than the property pane (except for isolated Adaptive Card Extensions).
     *
     * @remarks For isolated Adaptive Card Extensions, this lifecycle is invoked instead
     * of `onPropertyPaneFieldChanged`.
     *
     * @param prevProperties - The Adaptive Card Extension properties before the update.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.onAfterPropertiesUpdatedExternally = function (prevProperties) {
        /* EMPTY BLOCK */
    };
    /**
     * Lifecycle method called before the property bag is populated with the deserialized property object.
     *
     * @remarks
     * The default implementation is a no-op. An Adaptive Card Extension developer can override this API if the deserialized object
     * does not fully reflect the initial state of the property bag. This gives the Adaptive Card Extension developer a chance to
     * populate the property bag right after the data is deserialized to an object.
     *
     * An important scenario to use deserialize is upgrading. An upgraded Adaptive Card Extension may load the data
     * that was serialized by an older version of the Adaptive Card Extension that supported a different schema of the property bag,
     * resulting the deserialized object to be incosistent with the current schema of the property bag. The developer
     * can use `onAfterDeserialize` to check the dataVersion and fix the property bag.
     *
     * @param deserializedProperties - The object deserialized from the stored data. Note that the schema of this object
     * is not necessarily consistent with the current property bag, because the serialization could have been done by
     * an older version of the Adaptive Card Extension
     * @param dataVersion - The data version of the stored data being deserialized. You can use this value to determine
     * if the data was serialized by an older Adaptive Card Extension. Adaptive Card Extensions can define their data version
     * by overriding the dataVersion property.
     *
     * @returns The property bag of the Adaptive Card Extension
     *
     * @virtual
     */
    /* tslint:disable-next-line:no-any */
    BaseAdaptiveCardExtension.prototype.onAfterDeserialize = function (deserializedProperties, dataVersion) {
        return deserializedProperties;
    };
    /**
     * Lifecycle method called after the {@link @microsoft/sp-core-library#DisplayMode} changed.
     *
     * @virtual
     *
     * @param oldDisplayMode - The old display mode.
     */
    BaseAdaptiveCardExtension.prototype.onDisplayModeChanged = function (oldDisplayMode) {
        /* EMPTY BLOCK */
    };
    /**
     * Lifecycle method called before disposing the Adaptive Card Extension.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.onDispose = function () {
        // noop
    };
    /**
     * Lifecycle method called during initialization.
     *
     * @remarks Asynchronous data fetches should be started during this lifecycle. Rendering can either be dependent on the result
     * or, if resolved immediately, a fetching data state can be rendered.
     *
     * @param cachedLoadParameters - Parameters containing the cached state object (see {@link BaseAdaptiveCardExtension.getCachedState}), which can be used to rehydrate the AdaptiveCardExtension.
     * If undefined, the AdaptiveCardExtension was not cached or the cache expired.
     *
     * @alpha
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.onInit = function (cachedLoadParameters) {
        return Promise.resolve();
    };
    /**
     * Lifecycle method called when a Property Pane field is changed.
     *
     * @remarks This is invoked for reactive Property Panes.
     *
     * @param propertyPath - JSON path of the property in the property bag.
     *  In the case of custom field, if no target property is provided then a custom value is assigned,
     *  which will be in the form of `__CustomField_<key provided when the custom field is created>`.
     * @param oldValue - Old value of the property.
     *  This value could be undefined/empty in the case of custom field.
     * @param newValue - New value of the property.
     *  This value could be undefined/empty in the case of custom field.
     *
     * @virtual
     */
    /* tslint:disable-next-line:no-any */
    BaseAdaptiveCardExtension.prototype.onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
        /* noop */
    };
    /**
     * Lifecycle method called when the {@link RenderType} changes.
     *
     * @param oldRenderType - The previous {@link RenderType}.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.onRenderTypeChanged = function (oldRenderType) {
        /* EMPTY BLOCK */
    };
    /**
     * The id of the initial Card view.
     *
     * @remarks A Card view with this id must be registered with {@link cardNavigator} before rendering.
     *
     * @remarks By default, this returns undefined and will render a default Card view.
     *
     * @virtual
     */
    BaseAdaptiveCardExtension.prototype.renderCard = function () {
        return undefined;
    };
    /**
     * Provide Property Pane groups that will appear above the framework-level properties such as card size.
     *
     * @virtual
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._getPreFrameworkPropertyPaneConfiguration = function () {
        return [];
    };
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "_isFrameworkPropertyPaneEnabled", {
        /**
         * Whether the framework will add property pane groups (e.g., cardSize)
         *
         * @virtual
         * @internal
         */
        get: function () {
            return true;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "isVisible", {
        // #endregion
        // #region Public APIs
        /**
         * Sets the visibility of the Adaptive Card Extension and re-render
         *
         * @remarks This method should be called after a card view has been registered.
         *          Otherwise visibility change will not be applied to the Adaptive Card.
         *
         * @readonly
         */
        get: function () {
            return this._isVisible;
        },
        set: function (value) {
            this._isVisible = value;
            if (((0, Killswitches_1.isInitilizationGuardKSActivated)() || this._isInitialized) &&
                (this.cardNavigator._getRegistrySize() > 0 || this.cardNavigator._currentView)) {
                this.context._host.onVisibilityChanged(this._getRenderArguments(this.renderType));
            }
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Lifecycle method that signifies ACE has finished loading.
     * When this API is called, performance data will be generated.
     * Depending on `didUpdate` parameter, end marker for the rendering lifecycle can change.
     *   If an ACE received LKG data and does NOT need to update, render is completed when LKG is used.
     *   If an ACE received LKG data and DOES need to update, render is completed when new render arguments are used.
     *   If an ACE does not receive LKG data, render is completed when new render arguments are used.
     *
     * @param didUpdate - boolean value indicating if ACE has updated.
     *
     * @beta
     */
    BaseAdaptiveCardExtension.prototype.renderCompleted = function (didUpdate) {
        if (!(0, Killswitches_1.isRenderCompletedKSActivated)() && this._renderCompletedPromiseResolver) {
            this._renderCompletedPromiseResolver(didUpdate);
        }
    };
    BaseAdaptiveCardExtension.prototype._endMarkForRenderComplete = function (didUpdate, didTimeOut) {
        var monitor = new sp_diagnostics_1._QosMonitor("AdaptiveCardExtension.RenderCompleted");
        if (!this._isLoggedRenderPerf) {
            if (didUpdate) {
                if (didTimeOut) {
                    sp_telemetry_1._PerformanceLogger.endFailureForComponent(this._perfTagName, 'TimeOut');
                }
                else {
                    sp_telemetry_1._PerformanceLogger.endMarkForComponent(this._perfTagName);
                }
            }
            else {
                // this._lkgRenderTime will be defined if this.isRenderAsync is equal to true
                sp_telemetry_1._PerformanceLogger.endMarkForComponentWithTimestamp(this._perfTagName, this._lkgRenderTime);
            }
            this._isLoggedRenderPerf = true;
        }
        var aceLoadData = sp_component_base_2._WebPartLoadDataCollector.collect(this.context.manifest, this._perfTagName, this.context.pageContext);
        // tslint:disable-next-line:no-any
        var extraData = tslib_1.__assign(tslib_1.__assign({}, aceLoadData), { isInternal: this.manifest.isInternal || false, isInitializedWithLKG: this._isInitializedWithLKG, didTimeOut: didTimeOut, didUpdate: didUpdate, displayMode: !(0, Killswitches_1.isLogDisplayModeKSActivated)() ? this.displayMode : undefined });
        if (didTimeOut) {
            monitor.writeUnexpectedFailure('', undefined, extraData);
        }
        else {
            monitor.writeSuccess(extraData);
        }
        this.context._host.onRenderCompleted(this.instanceId, didUpdate);
        this._clearRenderCompletedGuardTimer();
    };
    BaseAdaptiveCardExtension.prototype._resolveRenderCompleted = function () {
        var _this = this;
        this._renderCompletedPromise.then(function (didUpdate) {
            _this._endMarkForRenderComplete(didUpdate, false);
        }).catch(function () {
            _this._endMarkForRenderComplete(true, true);
        });
    };
    /**
     * Update the state of the Adaptive Card Extension and re-render.
     *
     * @remarks Calling {@link BaseAdaptiveCardExtension.setState} without an object will force a re-render with the current state.
     *
     * @remarks {@link BaseAdaptiveCardExtension.state} must have been initialized before calling {@link BaseAdaptiveCardExtension.setState}.
     *
     * @param state - The new state to set.
     */
    BaseAdaptiveCardExtension.prototype.setState = function (newState) {
        if (!this._state) {
            throw new Error('state must be initialized before calling setState');
        }
        if (newState) {
            this._state = tslib_1.__assign(tslib_1.__assign({}, this.state), (0, sp_lodash_subset_1.cloneDeep)(newState));
            this._cardNavigator._forEach(this._onViewInitialized);
            this._quickViewNavigator._forEach(this._onViewInitialized);
        }
        if (this._isInitialized) {
            this.context._host.update(this._getRenderArguments(this._renderType));
        }
    };
    /**
     * Template updating with data updates is equivalent to creating a new card.
     * Unlike data updates, we require the disposal of the old card template factory to create a new renderer
     *
     * @deprecated Use `setState` instead
     * @internal
     *
     * @param renderTypeToUpdate - RenderType
     */
    BaseAdaptiveCardExtension.prototype.update = function (renderTypeToUpdate, updateOnlyData) {
        if (updateOnlyData === void 0) { updateOnlyData = false; }
        var card = this._getRenderArguments(renderTypeToUpdate, updateOnlyData);
        this.context._host.update(card);
    };
    // #endregion
    // #region Internal APIs
    /**
     * If this._cardObject is undefined create a new object and assign it.
     * Otherwise update the existing this._cardObject according to RenderType
     * @param renderTypeToUpdate - RenderType
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._getRenderArguments = function (renderTypeToUpdate, updateOnlyData, initialViewId) {
        var _this = this;
        var _a;
        if (updateOnlyData === void 0) { updateOnlyData = false; }
        var monitor = new sp_diagnostics_1._QosMonitor("AdaptiveCardExtension.GetRenderArguments.".concat(renderTypeToUpdate));
        try {
            if (!(0, Killswitches_1.isInitilizationGuardKSActivated)() && !this._isInitialized) {
                throw new Error("".concat(this.context.manifest.alias, " is not initialized"));
            }
            this._setRenderType(renderTypeToUpdate, initialViewId);
            if (renderTypeToUpdate === 'Card' && this.cardNavigator.size === 0) {
                var initialCardId = this.renderCard();
                if (!initialCardId) {
                    initialCardId = DEFAULT_VIEW_ID;
                    this._cardNavigator.register(initialCardId, function () { return new DefaultCardView_1.DefaultCardView(_this.description); });
                }
                this._cardNavigator.push(initialCardId, true);
            }
            if (this._ACRenderArgs === undefined) {
                this._ACRenderArgs = {
                    card: renderTypeToUpdate === 'Card' ? this._getCard(updateOnlyData) : undefined,
                    isVisible: this._isVisible,
                    instanceId: this.instanceId,
                    lastUpdatedType: renderTypeToUpdate,
                    quickLook: renderTypeToUpdate === 'QuickView' ? this._getQuickView(updateOnlyData) : undefined
                };
            }
            else {
                this._updateRenderArgs(renderTypeToUpdate, updateOnlyData);
            }
            if ((0, Flights_1.isAdaptiveCardExtensionLKGCachingEnabled)() &&
                /**
                 * When graduating isIsolatedAdaptiveCardExtensionWebPropertyPaneWorkAroundKSActivated only leave this.displayMode check.
                 * This is a workaround when load ACE WP in isolation to render the property pane. We need to update LKG to keep data consistent after editing.
                 * owner: joyi
                 */
                ((!(0, Killswitches_1.isIsolatedAdaptiveCardExtensionWebPropertyPaneWorkAroundKSActivated)() &&
                    !!this.context.manifest.isolatedDomain) ||
                    this.displayMode === sp_core_library_1.DisplayMode.Read) &&
                renderTypeToUpdate === 'Card') {
                var cacheObject = (_a = this._cacheManager) === null || _a === void 0 ? void 0 : _a.save(this._cacheKey, this.instanceId, this._cardNavigator._currentView, this._ACRenderArgs, this.cardNavigator.viewStack, this.getCachedState(tslib_1.__assign({}, this._state)));
                this._ACRenderArgs.cacheObject = cacheObject;
            }
            var extraData = void 0;
            if (!this._isLoggedRenderPerf && !this.isRenderAsync) {
                sp_telemetry_1._PerformanceLogger.endMarkForComponent(this._perfTagName);
                extraData = sp_component_base_2._WebPartLoadDataCollector.collect(this.context.manifest, this._perfTagName, this.context.pageContext);
                this._isLoggedRenderPerf = true;
                if (!(0, Killswitches_1.isRenderCompletedKSActivated)()) {
                    this.context._host.onRenderCompleted(this.instanceId, true);
                }
            }
            if (!(0, Killswitches_1.isLogIsInternalToGetRenderArgumentQosKSActivated)()) {
                extraData = tslib_1.__assign(tslib_1.__assign({}, extraData), { isInternal: this.manifest.isInternal || false, displayMode: !(0, Killswitches_1.isLogDisplayModeKSActivated)() ? this.displayMode : undefined });
            }
            monitor.writeSuccess(extraData);
        }
        catch (err) {
            var extraData = void 0;
            if (!this._isLoggedRenderPerf) {
                sp_telemetry_1._PerformanceLogger.endFailureForComponent(this._perfTagName, 'Render', err);
                extraData = sp_component_base_2._WebPartLoadDataCollector.collect(this.context.manifest, this._perfTagName, this.context.pageContext);
                this._isLoggedRenderPerf = true;
                if (!(0, Killswitches_1.isRenderCompletedKSActivated)()) {
                    this.context._host.onRenderCompleted(this.instanceId, true);
                }
            }
            monitor.writeUnexpectedFailure('failedGetRenderArguments', err, tslib_1.__assign(tslib_1.__assign({}, extraData), { alias: this.context.manifest.alias, deviceContext: this.context.deviceContext, instanceId: this.instanceId, isInternal: !(0, Killswitches_1.isLogIsInternalToGetRenderArgumentQosKSActivated)()
                    ? this.manifest.isInternal || false
                    : undefined, manifestId: this.context.manifest.id, displayMode: !(0, Killswitches_1.isLogDisplayModeKSActivated)() ? this.displayMode : undefined }));
            if (!(0, Killswitches_1.isACELoadASHACustomerPromisifiedKSActivated)() &&
                this.manifest.isInternal &&
                this.displayMode === sp_core_library_1.DisplayMode.Edit) {
                // log to ASHA edit customer promise for 1P card view in edit mode.
                // note: all actions are blocked in edit mode, thus only card view is available.
                this.context._logEditCustomerPromiseFailure(this.manifest.alias, err.message, 'AdaptiveCardExtensionGetRenderArgumentsFailed');
            }
        }
        return this._ACRenderArgs;
    };
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._propertiesMetadata = function () {
        return this.propertiesMetadata;
    };
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._getPropertyPaneConfiguration = function () {
        return this.getPropertyPaneConfiguration();
    };
    Object.defineProperty(BaseAdaptiveCardExtension.prototype, "navigator", {
        /**
         * The current {@link ViewNavigator}.
         *
         * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `Card`
         * then returns {@link BaseAdaptiveCardExtension.cardNavigator}.
         *
         * @remarks If the current {@link BaseAdaptiveCardExtension.renderType} is `QuickView`
         * then returns {@link BaseAdaptiveCardExtension.quickViewNavigator}.
         */
        get: function () {
            return this.renderType === 'Card' ? this._cardNavigator : this._quickViewNavigator;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalDeserialize = function (data) {
        if (data.title) {
            this._title = data.title;
        }
        if (data.iconProperty) {
            this._iconProperty = data.iconProperty;
        }
        if (data.description) {
            this._description = data.description;
        }
        if (data.cardSize) {
            this._cardSize = data.cardSize;
        }
        // tslint:disable-next-line:no-any
        var deserializedProperties = data.properties;
        if (this.renderedFromPersistedData) {
            sp_component_base_1._PropertyMetadataProcessor.reInstateServerProcessedData(this.propertiesMetadata, deserializedProperties, data.serverProcessedContent);
            // Unset the server processed content to avoid duplicated process in BaseWebPart.
            data.serverProcessedContent = undefined;
        }
        if (this._properties) {
            // For isolated ACEs we need to keep the same reference for the lifecycle of the ACE
            Object.assign(this._properties, deserializedProperties);
        }
        else {
            // When this is called when the ACE is first created using a preconfigured entry, data.dataVersion could be undefined
            this._properties = this.onAfterDeserialize(deserializedProperties, data.dataVersion ? sp_core_library_1.Version.parse(data.dataVersion) : this.dataVersion);
        }
        if (!(0, Killswitches_1.isRenderCompletedKSActivated)() && this.isRenderAsync) {
            this._startRenderCompletedGuardTimer();
        }
        if ((0, Flights_1.isAdaptiveCardExtensionLKGCachingEnabled)()) {
            this._cacheKey = this._generateCacheKey(data.dashboardWebPartInstanceId);
        }
        this._instanceIdForLogs =
            !(0, Killswitches_1.isLogACEInstanceIdWithinDashboardWebPartKSEnabled)() && data.instanceIdForLogs
                ? data.instanceIdForLogs
                : data.instanceId;
    };
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalInitialize = function (context, addedFromPersistedData, initialDisplayMode, tagName, isInitializedWithLKG) {
        var _this = this;
        _super.prototype._initializeContext.call(this, context);
        this._displayMode = initialDisplayMode;
        this._renderedOnce = false;
        this._renderedFromPersistedData = addedFromPersistedData;
        if ((0, Flights_1.isAdaptiveCardExtensionLKGCachingEnabled)()) {
            this._cacheManager = new CacheManager_1.CacheManager(this.context, function () { return _this.cardSize; }, function () { return _this.iconProperty; }, function () { return _this.title; }, this._onViewInitialized, this.getCacheSettings());
        }
        this._perfTagName = tagName;
        this._isInitializedWithLKG = isInitializedWithLKG;
    };
    /**
     * Internal API to switch the Adaptive Card Extension's display mode.
     *
     * The AdaptiveCardExtensionWebPart, in its method of the same name, calls this method.
     *
     * @param newDisplayMode - the new DisplayMode of the Web Part hosting this Adaptive Card Extension.
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalSetDisplayMode = function (newDisplayMode) {
        if (this._displayMode !== newDisplayMode) {
            var oldDisplayMode = this._displayMode;
            this._displayMode = newDisplayMode;
            this.onDisplayModeChanged(oldDisplayMode);
        }
    };
    /**
     * API to enable asynchronous loading of property pane related resources of a web part.
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._loadPropertyPaneResources = function () {
        return this.loadPropertyPaneResources();
    };
    /**
     * Invoked from the AdaptiveCardExtensionWebPart's `onPropertyPaneFieldChanged` implementation.
     *
     * @param propertyPath - property to update.
     * @param newValue - new value.
     *
     * @internal
     */
    // tslint:disable-next-line:no-any
    BaseAdaptiveCardExtension.prototype._onPropertyPaneFieldChanged = function (propertyPath, oldValue, newValue) {
        if (!(0, sp_lodash_subset_1.isEqual)(oldValue, newValue)) {
            this._updateProperty(propertyPath, newValue);
            this.onPropertyPaneFieldChanged(propertyPath, oldValue, newValue);
        }
    };
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._renderCompleted = function () {
        this._renderedOnce = true;
    };
    /**
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalOnAfterInit = function () {
        this._isInitialized = true;
        if (!(0, Killswitches_1.isRenderCompletedKSActivated)() && this.isRenderAsync) {
            // If LKG cache exists the host would have rendered it while the ACE was initializing.
            // Capture this._lkgRenderTime after async rendering ACE is initialized.
            this._lkgRenderTime = sp_telemetry_1._PerformanceLogger.now();
        }
    };
    /**
     * Return the persisted content of Adaptive Card Extension.
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._internalSerialize = function () {
        this.onBeforeSerialize();
        return {
            dataVersion: this.dataVersion.toString(),
            id: this.componentId,
            instanceId: this.instanceId,
            properties: this.properties,
            title: this.title,
            description: this._description,
            iconProperty: this.iconProperty,
            cardSize: this._cardSize
        };
    };
    /**
     * Internal API called by the AdaptiveCardExtensionWebPart / Bridge to inform the AdaptiveCardExtension that the RenderType has changed
     * This API calls the onRenderTypeChanged event method
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._setRenderType = function (newRenderType, initialViewId) {
        if (this._renderType !== newRenderType) {
            var oldRenderType = this._renderType;
            // When the Quick view closes, clear the view stack
            if (oldRenderType === 'QuickView') {
                this._quickViewNavigator._clear();
            }
            if (oldRenderType === 'Card') {
                this._quickViewNavigator._clear();
                if (initialViewId !== undefined) {
                    this._quickViewNavigator.push(initialViewId, true);
                }
            }
            this._renderType = newRenderType;
            this.onRenderTypeChanged(oldRenderType);
        }
    };
    /**
     * This function updates property pane configurable fields on base adaptive card extension
     *
     * @param path - property pane path that specifies which field to update
     * @param value - new value to update the field with
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._updateConfigurableFields = function (path, value) {
        switch (path) {
            case 'cardSize':
                this._cardSize = value;
                break;
        }
    };
    /**
     * Tracks Adaptive Card Extension card action.
     *
     * @param actionType - Type of action performed
     * @param location - See {@link @microsoft/sp-webpart-base#IWebPartManagerContext.PageHostLayoutType}.
     * @param deviceContext - {@link DeviceContext}
     * @param mobileSessionId - mobile session id
     * @param mobileBootType - mobile boot type
     *
     * @internal
     */
    BaseAdaptiveCardExtension.prototype._logCardActionEngagement = function (actionType, location, mobileSessionId, mobileBootType) {
        var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
        sp_diagnostics_1._EngagementLogger.log({
            name: 'AdaptiveCardExtension.CardAction',
            isIntentional: true,
            siteId: (_b = (_a = this.context.pageContext) === null || _a === void 0 ? void 0 : _a.site) === null || _b === void 0 ? void 0 : _b.id.toString(),
            webId: (_d = (_c = this.context.pageContext) === null || _c === void 0 ? void 0 : _c.web) === null || _d === void 0 ? void 0 : _d.id.toString(),
            extraData: {
                actionType: actionType,
                alias: this.manifest.alias,
                cardSize: this.cardSize,
                componentDeveloperName: this.manifest.componentDeveloperName,
                correlationId: (_e = this.context.pageContext.site.correlationId) === null || _e === void 0 ? void 0 : _e.toString(),
                deviceContext: this.context.deviceContext,
                eventSchemaVersion: 10,
                isInternal: this.manifest.isInternal || false,
                instanceId: this._instanceIdForLogs,
                listId: this._urlParams.get('dashboardListID')
                    ? this._urlParams.get('dashboardListID')
                    : (_f = this.context.pageContext.list) === null || _f === void 0 ? void 0 : _f.id.toString(),
                listItemUniqueId: this._urlParams.get('id')
                    ? this._urlParams.get('id')
                    : (_g = this.context.pageContext.listItem) === null || _g === void 0 ? void 0 : _g.id,
                manifestId: this.manifest.id,
                mobileSessionId: mobileSessionId,
                mobileBootType: mobileBootType,
                mpnId: this.manifest.mpnId,
                renderType: !(0, Killswitches_1.isQuickViewLoadEngagementLogRenderTypeCardKSActivated)() && actionType === 'QuickView'
                    ? 'Card'
                    : this.renderType,
                tenantId: (_k = (_j = (_h = this.context.pageContext) === null || _h === void 0 ? void 0 : _h.aadInfo) === null || _j === void 0 ? void 0 : _j.tenantId) === null || _k === void 0 ? void 0 : _k.toString().toLowerCase(),
                vivaConnectionsAppId: 'd2c6f111-ffad-42a0-b65e-ee00425598aa',
                vivaConnectionsName: 'MEE',
                workLoad: location
            }
        });
    };
    /**
     * Returns the AdaptiveCard payload (template and data), as well as the top PageBar's configuration properties
     *
     * @param updateOnlyData - boolean
     */
    BaseAdaptiveCardExtension.prototype._getQuickView = function (updateOnlyData) {
        if (this._quickViewNavigator.size === 0) {
            return undefined;
        }
        var currentView = this._quickViewNavigator._currentView;
        if (currentView === undefined) {
            return undefined;
        }
        (0, actionButtonHelper_1.updateExternalLinkTeamsDeepLinkTarget)(currentView.externalLink, this.context.deviceContext);
        return {
            data: currentView.data,
            template: updateOnlyData ? this._ACRenderArgs.quickLook.template : currentView.template,
            pageBarProperties: {
                externalLink: currentView.externalLink,
                leftNavigationButtonType: this._quickViewNavigator.size > 1 ? 'Back' : 'Close',
                title: currentView.title
            },
            viewId: this._quickViewNavigator.currentId,
            viewStackSize: this._quickViewNavigator.size
        };
    };
    /**
     * Updates this._cardObject fields according to type given
     * If RenderType is
     * 'L1' then call getL1 will be invoked. This will be used internally to support first time render
     * 'L2' and updateOnlyData == false, then getL2Template and getL2Data will be invoked
     * 'L2' and updateOnlyData == true, then getL2Data will be invoked and the last known template will be reused
     * @param renderTypeToUpdate - RenderType
     * @param updateOnlyData - boolean
     */
    BaseAdaptiveCardExtension.prototype._updateRenderArgs = function (renderTypeToUpdate, updateOnlyData) {
        this._ACRenderArgs.lastUpdatedType = renderTypeToUpdate;
        this._ACRenderArgs.isVisible = this._isVisible;
        if (renderTypeToUpdate === 'Card') {
            this._ACRenderArgs.card = this._getCard(updateOnlyData);
        }
        else {
            this._ACRenderArgs.quickLook = this._getQuickView(updateOnlyData);
        }
    };
    BaseAdaptiveCardExtension.prototype._updateProperty = function (path, value) {
        (0, sp_lodash_subset_1.update)(this._properties, path, function () { return value; });
    };
    /**
     * Start renderComplete guard timer.
     * If renderComplete API is not called within DEFAULT_ASYNC_RENDER_COMPLETED_TIMEOUT_TIME seconds,
     * it will automatically invoke renderComplete as a time out.
     *
     * Note: Timer guard exist because BaseClientSideWebpart have a 30 second timer guard.
     * This accounts for isolated ace scenario where it has to create the isolated domain and load the ace in it.
     *
     */
    BaseAdaptiveCardExtension.prototype._startRenderCompletedGuardTimer = function () {
        var _this = this;
        this._renderCompletedPromise = new Promise(function (resolve, reject) {
            _this._renderCompletedPromiseResolver = resolve;
            _this._renderCompletedPromiseRejector = reject;
        });
        this._renderCompletedGuardTimer = window.setTimeout(function () {
            _this._renderCompletedPromiseRejector();
        }, DEFAULT_ASYNC_RENDER_COMPLETED_TIMEOUT_TIME);
        this._resolveRenderCompleted();
    };
    BaseAdaptiveCardExtension.prototype._clearRenderCompletedGuardTimer = function () {
        if (this._renderCompletedGuardTimer) {
            window.clearTimeout(this._renderCompletedGuardTimer);
            this._renderCompletedGuardTimer = undefined;
            this._renderCompletedPromiseResolver = undefined;
            this._renderCompletedPromiseRejector = undefined;
            this._renderCompletedPromise = undefined;
        }
    };
    BaseAdaptiveCardExtension.prototype._generateCacheKey = function (dashboardWebPartInstanceId) {
        var _a;
        if (!(0, Flights_1.isAdaptiveCardExtensionMySiteCacheEnabled)() ||
            this.context.deviceContext === 'Mobile' ||
            this.context.manifest.isolatedDomain) {
            return LocalStorageACECache_1.LocalStorageACECache.getKey(this.context.pageContext.site.id.toString(), (_a = this.context.pageContext.listItem) === null || _a === void 0 ? void 0 : _a.uniqueId);
        }
        else {
            return dashboardWebPartInstanceId !== null && dashboardWebPartInstanceId !== void 0 ? dashboardWebPartInstanceId : this.instanceId;
        }
    };
    return BaseAdaptiveCardExtension;
}(sp_component_base_1.BaseComponent));
exports.BaseAdaptiveCardExtension = BaseAdaptiveCardExtension;
//# sourceMappingURL=BaseAdaptiveCardExtension.js.map