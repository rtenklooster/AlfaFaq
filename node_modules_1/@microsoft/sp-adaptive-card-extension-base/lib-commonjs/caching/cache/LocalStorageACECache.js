"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.LocalStorageACECache = void 0;
var tslib_1 = require("tslib");
var BaseAdaptiveCardExtensionCache_1 = require("./BaseAdaptiveCardExtensionCache");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
/**
 * LKG Cache which uses LocalStorage as its backing store.
 *
 * @internal
 */
var LocalStorageACECache = /** @class */ (function (_super) {
    tslib_1.__extends(LocalStorageACECache, _super);
    function LocalStorageACECache() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    LocalStorageACECache.getKey = function (siteId, listItemUniqueId) {
        return "AdaptiveCardExtension_LKG_".concat(siteId, "_").concat(listItemUniqueId);
    };
    Object.defineProperty(LocalStorageACECache, "instance", {
        get: function () {
            if (this._instance === undefined) {
                this._instance = new LocalStorageACECache();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    LocalStorageACECache.prototype.save = function (key, instanceId, cacheObject) {
        var monitor = new sp_diagnostics_1._QosMonitor('ACE.LocalStorage.save');
        try {
            var localStorageEntry = this._getLocalStorageEntry(key);
            localStorageEntry.set(instanceId, cacheObject);
            var mapEntriesArray = Array.from(localStorageEntry.entries());
            localStorage.setItem(key, JSON.stringify(mapEntriesArray));
            monitor.writeSuccess();
        }
        catch (e) {
            var alias = cacheObject.cachedCard.cardProperties.title || '';
            monitor.writeUnexpectedFailure('', e, {
                alias: alias,
                instanceId: instanceId
            });
        }
    };
    LocalStorageACECache.prototype.getFromSource = function (key, instanceId) {
        var monitor = new sp_diagnostics_1._QosMonitor('ACE.LocalStorage.get');
        try {
            var entries = this._getLocalStorageEntry(key);
            var cachedObject = entries.get(instanceId);
            if (cachedObject) {
                monitor.writeSuccess();
            }
            else {
                monitor.writeExpectedFailure('cacheMiss', undefined, { instanceId: instanceId });
            }
            return Promise.resolve(cachedObject);
        }
        catch (e) {
            monitor.writeUnexpectedFailure('', e, { instanceId: instanceId });
            return Promise.resolve(undefined);
        }
    };
    LocalStorageACECache.prototype._getLocalStorageEntry = function (key) {
        var cacheString = localStorage.getItem(key);
        var localStorageEntry = cacheString
            ? new Map(JSON.parse(cacheString))
            : new Map();
        return localStorageEntry;
    };
    return LocalStorageACECache;
}(BaseAdaptiveCardExtensionCache_1.BaseAdaptiveCardExtensionCache));
exports.LocalStorageACECache = LocalStorageACECache;
//# sourceMappingURL=LocalStorageACECache.js.map