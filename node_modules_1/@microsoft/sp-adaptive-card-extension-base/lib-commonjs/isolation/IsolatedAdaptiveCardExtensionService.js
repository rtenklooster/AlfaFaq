"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.IsolatedAdaptiveCardExtensionService = void 0;
var sp_component_base_1 = require("@microsoft/sp-component-base");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_http_base_1 = require("@microsoft/sp-http-base");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var sp_telemetry_1 = require("@ms/sp-telemetry");
var Flights_1 = require("../common/Flights");
var Killswitches_1 = require("../common/Killswitches");
var TIMEOUT_INTERVAL = 15000;
/**
 * @internal
 */
var IsolatedAdaptiveCardExtensionService = /** @class */ (function () {
    function IsolatedAdaptiveCardExtensionService(_serviceScope) {
        var _this = this;
        this._serviceScope = _serviceScope;
        this._callbackCache = new Map();
        this._isolatedFrames = new Map();
        this._isolatedListeners = new Map();
        this._handleIframeTimeout = function (isolatedFrameKey, isVCD1P) {
            var frame = _this._isolatedFrames.get(isolatedFrameKey);
            var frameMonitor = frame.frameMonitor, retryMonitor = frame.retryMonitor, tokenMonitor = frame.tokenMonitor;
            /*
             * There is a rare case the iframe is running into a "reset connection" error. This is because the
             * client/server is unable to communicate for an unknown reason. When we run into this, we will attempt to refresh the iframe once.
             */
            if (!(0, Killswitches_1.isIframeReloadKSActivated)() && frame.retryCount < 1) {
                frame.retryCount += 1;
                frame.iframe.src = frame.iframe.src;
                frame.retryMonitor = new sp_diagnostics_1._QosMonitor('IsolatedAdaptiveCardExtension.iframeReload');
                // Use a shorter interval for the retry, this would put the retry around ~P95
                frame.timeoutId = setTimeout(function () { return _this._handleIframeTimeout(isolatedFrameKey, isVCD1P); }, TIMEOUT_INTERVAL - 500);
                return;
            }
            else if (retryMonitor) {
                retryMonitor.writeUnexpectedFailure('reloadFailed');
            }
            /*
             * If this timeout has been executed then the isolated ACE application
             * did not send the `Ready` message to the host applicaton. By checking if
             * the `tokenMonitor` exists we can verify whether framedteamslogon even requested
             * a token. If it doesn't exist, then we assume we are stuck in the MSAL interactive flow.
             * This would be unexpected in Teams but is a known issue in browsers with ITP or 3P
             * cookies blocked.
             */
            if (frameMonitor && !frameMonitor.hasEnded) {
                try {
                    if (tokenMonitor) {
                        frameMonitor.writeUnexpectedFailure('tokenTimeout');
                        if (!tokenMonitor.hasEnded) {
                            tokenMonitor.writeUnexpectedFailure('timeout');
                        }
                    }
                    else {
                        if (isVCD1P) {
                            // We should never hit this, but adding for completeness
                            frameMonitor.writeUnexpectedFailure('authorizeTimeout');
                        }
                        else {
                            frameMonitor.writeExpectedFailure('authorizeTimeout');
                        }
                    }
                }
                catch (e) {
                    frameMonitor.writeUnexpectedFailure('unexpectedFailure', e);
                }
            }
        };
        /**
         * Message handler for isolated domain iframes.
         *
         * @param message - {@link _IsolatedAdaptiveCardExtensionApplicationMessageEvent}
         */
        this._handleIsolatedApplicationMessage = function (message) {
            var data = message.data;
            if (data.messageType === 'applicationMessage') {
                var instanceId = data.instanceId, kind = data.kind;
                switch (kind) {
                    case 'Card':
                        _this._invokeCallback(instanceId, {
                            aceData: data.aceData,
                            card: data.card,
                            cacheObject: data.cacheObject,
                            type: kind
                        });
                        break;
                    case 'CloseQuickView':
                        var qvFrame = _this._isolatedFrames.get(new URL(message.origin).hostname);
                        if (qvFrame) {
                            qvFrame.iframe.hidden = true;
                        }
                        break;
                    case 'Error':
                        _this._invokeCallback(instanceId, { error: data.error, type: kind });
                        break;
                    case 'OpenQuickView':
                        var frame = _this._isolatedFrames.get(new URL(message.origin).hostname);
                        if (frame) {
                            frame.iframe.hidden = false;
                        }
                        break;
                    case 'OpenUrl':
                        _this._invokeCallback(instanceId, { type: kind, url: data.url });
                        break;
                    case 'LocationRequest':
                        _this._invokeCallback(instanceId, { type: kind });
                        break;
                    case 'RenderCompleted':
                        _this._invokeCallback(instanceId, { type: kind, didUpdate: data.didUpdate });
                        break;
                    case 'Ready':
                        /*
                         * Once we get this message from the isolated ACE application, we know it has been loaded
                         * and we can start sending messages to the isolated frame.
                         */
                        var isolatedFrame = _this._isolatedFrames.get(new URL(message.origin).hostname);
                        if (isolatedFrame) {
                            if (!(0, Killswitches_1.isIframeReloadKSActivated)() && isolatedFrame.retryMonitor) {
                                isolatedFrame.retryMonitor.writeSuccess();
                            }
                            if (!(0, Killswitches_1.isAdditionalLoggingKSActivated)()) {
                                clearTimeout(isolatedFrame.timeoutId);
                                isolatedFrame.frameMonitor.writeSuccess();
                            }
                            isolatedFrame.isReady = true;
                            for (var _i = 0, _a = isolatedFrame.messageQueue; _i < _a.length; _i++) {
                                var _b = _a[_i], id = _b[0], msg = _b[1];
                                _this._sendMessage(_this._getIsolatedFrame(id), id, msg); /* tslint:disable-line:no-any */
                            }
                            isolatedFrame.messageQueue = [];
                        }
                        break;
                    case 'OBOTokenRequest':
                        var applicationId = data.applicationId, claims = data.claims;
                        _this._getAuthToken(applicationId, claims, message.origin);
                        break;
                    default:
                        _this._logError("Unexpected message: ".concat(JSON.stringify(message.data)));
                        break;
                }
            }
            else if (data.messageType === 'bridgeMessage' && data.bridgeAction === 'onTokenRequested') {
                /*
                 * When we load in Teams, we use framedteamslogon to ensure the isolated app iframe has a valid cookie.
                 * If it doesn't then framedteamslogon will request a token from the host app to use to call the
                 * /Authenticate API, which will set a new session cookie on the iframe and then redirect to the isolated
                 * ACE applicaton.
                 */
                var isLogKSActivated_1 = (0, Killswitches_1.isAdditionalLoggingKSActivated)();
                var monitor_1 = isLogKSActivated_1
                    ? undefined
                    : new sp_diagnostics_1._QosMonitor('IsolatedAdaptiveCardExtensionService.onTokenRequested');
                var applicationId = data.applicationId, claims = data.claims;
                var isolatedFrame_1 = _this._isolatedFrames.get(new URL(message.origin).hostname);
                if (!isLogKSActivated_1 && !isolatedFrame_1) {
                    monitor_1.writeUnexpectedFailure('missingIsolatedFrame');
                    return;
                }
                isolatedFrame_1.tokenMonitor = monitor_1;
                var configurableTokenProvider = sp_http_base_1._AadTokenProviders.configurable;
                if (!isLogKSActivated_1 && !configurableTokenProvider._oboThirdPartyTokenCallback) {
                    monitor_1.writeUnexpectedFailure('missingThirdPartyTokenCallback');
                    return;
                }
                try {
                    configurableTokenProvider._oboThirdPartyTokenCallback(applicationId, claims)
                        .then(function (token) {
                        if (!isLogKSActivated_1 && !isolatedFrame_1.iframe.contentWindow) {
                            throw new Error('missingContentWindow');
                        }
                        isolatedFrame_1.iframe.contentWindow.postMessage({ token: token, messageType: 'dashboardMessage', kind: 'Token' }, '*');
                        if (!isLogKSActivated_1) {
                            monitor_1.writeSuccess();
                        }
                    })
                        .catch(function (e) {
                        if (!isLogKSActivated_1) {
                            monitor_1.writeUnexpectedFailure('oboThirdPartyTokenCallbackError', e);
                        }
                    });
                }
                catch (e) {
                    /*
                     * This is to account for an exception when calling the `_oboThirdPartyTokenCallback`.
                     * We've seen in the past where it unexpectedly returned `undefined` causing the Promise
                     * chain to never be executed.
                     */
                    if (!isLogKSActivated_1) {
                        monitor_1.writeUnexpectedFailure('unexpectedException', e);
                    }
                }
            }
        };
        window.addEventListener('message', this._handleIsolatedApplicationMessage);
    }
    Object.defineProperty(IsolatedAdaptiveCardExtensionService.prototype, "_pageContext", {
        get: function () {
            if (!this._pContext) {
                // Since this service can be autocreated, we must consume services after autocreation has finished
                this._pContext = this._serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
            }
            return this._pContext;
        },
        enumerable: false,
        configurable: true
    });
    IsolatedAdaptiveCardExtensionService.prototype.disposeEntry = function (instanceId) {
        this._isolatedListeners.delete(instanceId);
    };
    /**
     * Load an isolated Adaptive Card Extension.
     *
     * @remarks Only loads one iframe per isolated domain.
     *
     * @param args - {@link _ILoadIsolatedAdaptiveCardExtensionParameters}
     */
    IsolatedAdaptiveCardExtensionService.prototype.load = function (args) {
        var _this = this;
        var callback = args.callback, dashboardListId = args.dashboardListId, itemId = args.itemId, instanceId = args.instanceId, listenerId = args.listenerId, manifestId = args.manifestId, serviceDestinationEndpoint = args.serviceDestinationEndpoint, botId = args.botId;
        // Normalize the domain since we are using it as dictionary keys
        var isolatedDomain = args.isolatedDomain.toLowerCase();
        var isolatedFrame = this._isolatedFrames.get(isolatedDomain);
        if (!isolatedFrame) {
            var isLogKSActivated = (0, Killswitches_1.isAdditionalLoggingKSActivated)();
            var monitor_2 = isLogKSActivated
                ? undefined
                : new sp_diagnostics_1._QosMonitor('IsolatedAdaptiveCardExtensionService.load');
            var iframe = document.createElement('iframe');
            var serverRelativeUrl = this._pageContext.site.serverRelativeUrl;
            var destBaseUrl = serverRelativeUrl === '/' ? '' : serverRelativeUrl;
            var destUrlParams = new URLSearchParams(window.location.search);
            destUrlParams.append('dashboardListID', dashboardListId);
            destUrlParams.append('id', itemId);
            if (sp_telemetry_1._SPPerfExperiment.getVariantAndTrackExperiment(sp_telemetry_1._PerformanceExperiment.WEXOOPIF) === 1) {
                destUrlParams.append('OOPIF', '1');
            }
            if ((0, Killswitches_1.isTargetBotDriveAceAspxKSActivated)() || !!botId) {
                destUrlParams.append('instanceId', instanceId);
            }
            if (!(0, Killswitches_1.isPassAndSetDeviceContextThroughSearchParamKSActivated)()) {
                destUrlParams.append('deviceContext', sp_core_library_1._BrowserUtilities.isTeams1PVivaDesktopHosted() ? 'TeamsDesktop' : 'WebView');
            }
            var layoutPage = !(0, Killswitches_1.isTargetBotDriveAceAspxKSActivated)() && serviceDestinationEndpoint !== undefined
                ? serviceDestinationEndpoint
                : 'adaptivecardextensions.aspx';
            var destUrl = "/_layouts/15/".concat(layoutPage, "?").concat(destUrlParams.toString());
            var isolatedUrlBase = (0, sp_component_base_1._ensureIsolatedDomainUrl)(isolatedDomain, this._pageContext.web.absoluteUrl);
            var isVCD1P_1 = sp_core_library_1._BrowserUtilities.isTeams1PVivaDesktopHosted();
            if (!(0, Killswitches_1.isUseBrokerLogonKSEnabled)() && sp_core_library_1._BrowserUtilities.isUsingSecureBroker()) {
                iframe.src = "".concat(isolatedUrlBase, "/_layouts/15/brokerlogon.aspx?spfx=true&").concat(sp_core_library_1._BROKER_IN_USE_KEY, "=true&dest=").concat(encodeURIComponent(isolatedUrlBase + destUrl));
            }
            else if (isVCD1P_1 && (0, Flights_1.isFramedTeamsLogonEnabled)()) {
                // Use framedteamslogon.aspx for scenarios where cookie auth doesn't work e.g. Teams, Safari, etc.
                iframe.src = "".concat(isolatedUrlBase, "/_layouts/15/framedteamslogon.aspx?spfx=true&dest=").concat(encodeURIComponent(destBaseUrl + destUrl));
            }
            else {
                iframe.src = isolatedUrlBase + destUrl;
            }
            /*
             * Initialize the iframe as hidden and full screen.
             * This effectively sets up the isolated iframe as an overlay over the application.
             */
            iframe.hidden = true;
            iframe.scrolling = 'no';
            iframe.style.overflow = 'hidden';
            iframe.style.height = '100%';
            iframe.style.width = '100%';
            iframe.style.top = '0';
            iframe.style.left = '0';
            iframe.style.position = 'fixed';
            iframe.style.zIndex = '99999';
            iframe.style.border = 'none';
            if (!(0, Killswitches_1.isGeolocationAllowedInIsolatedDomainKSActivated)()) {
                iframe.setAttribute('allow', 'geolocation');
            }
            iframe.setAttribute('data-automation-id', 'isolated_ACE_iframe');
            document.body.appendChild(iframe);
            var isolatedFrameKey_1 = isolatedDomain.toLowerCase();
            isolatedFrame = {
                iframe: iframe,
                frameMonitor: monitor_2,
                isReady: false,
                messageQueue: [],
                retryCount: 0
            };
            if (!(0, Killswitches_1.isIframeReloadKSActivated)()) {
                isolatedFrame.timeoutId = setTimeout(function () { return _this._handleIframeTimeout(isolatedFrameKey_1, isVCD1P_1); }, TIMEOUT_INTERVAL);
            }
            else if (!isLogKSActivated) {
                isolatedFrame.timeoutId = setTimeout(function () {
                    if (monitor_2 && !monitor_2.hasEnded) {
                        var frame = _this._isolatedFrames.get(isolatedFrameKey_1);
                        try {
                            if (frame.tokenMonitor) {
                                monitor_2.writeUnexpectedFailure('tokenTimeout');
                                if (!frame.tokenMonitor.hasEnded) {
                                    frame.tokenMonitor.writeUnexpectedFailure('timeout');
                                }
                            }
                            else {
                                if (isVCD1P_1) {
                                    // We should never hit this, but adding for completeness
                                    monitor_2.writeUnexpectedFailure('authorizeTimeout');
                                }
                                else {
                                    monitor_2.writeExpectedFailure('authorizeTimeout');
                                }
                            }
                        }
                        catch (e) {
                            monitor_2.writeUnexpectedFailure('unexpectedFailure', e);
                        }
                    }
                }, 15000);
            }
            this._isolatedFrames.set(isolatedFrameKey_1, isolatedFrame);
        }
        var entry = this._isolatedListeners.get(instanceId);
        if (!entry) {
            var listenerEntry = {
                isolatedDomain: isolatedDomain,
                iframe: isolatedFrame.iframe,
                listeners: new Map([[listenerId, { callback: callback }]]),
                manifestId: manifestId
            };
            if (botId) {
                listenerEntry.botId = botId;
            }
            this._isolatedListeners.set(instanceId, listenerEntry);
        }
        else if (!entry.listeners.get(listenerId)) {
            entry.listeners.set(listenerId, { callback: callback });
        }
        // When we are creating a new isolated ACE during authoring, we need to tell the isolated app to initialize a new ACE instance.
        if (!args.isRenderedFromPersistedData) {
            this.sendInitialize(instanceId, manifestId);
        }
        // If the ACE has previously loaded, then send the latest data to the listener.
        // Otherwise, when the isolated domain iframe has loaded we will automatically notify the listener.
        var callbackArgs = this._callbackCache.get(instanceId);
        if (callbackArgs) {
            this._invokeCallback(instanceId, callbackArgs, listenerId);
        }
    };
    /**
     * Display the iframe with the ACE quick view.
     *
     * @param args - {@link _IRenderIsolatedQuickViewParameters}
     */
    IsolatedAdaptiveCardExtensionService.prototype.renderQuickView = function (args) {
        var instanceId = args.instanceId, isSelectAction = args.isSelectAction, listenerId = args.listenerId, pageTheme = args.pageTheme, targetRect = args.targetRect, theme = args.theme, viewId = args.viewId;
        this._sendMessage(this._getIsolatedFrame(instanceId), instanceId, {
            serviceAction: 'Action',
            action: {
                action: { type: 'QuickView', isSelectAction: isSelectAction, pageTheme: pageTheme, targetRect: targetRect, theme: theme, viewId: viewId },
                instanceId: instanceId,
                listenerId: listenerId
            }
        });
    };
    IsolatedAdaptiveCardExtensionService.prototype.setDisplayMode = function (displayMode) {
        // not implemented
    };
    IsolatedAdaptiveCardExtensionService.prototype.setRenderType = function (newRenderType) {
        // not implemented
    };
    /**
     * Send an action to an isolated ACE.
     *
     * @param action - {@link _IIsolatedAction}
     */
    IsolatedAdaptiveCardExtensionService.prototype.sendAction = function (action) {
        var instanceId = action.instanceId;
        this._sendMessage(this._getIsolatedFrame(instanceId), instanceId, { serviceAction: 'Action', action: action });
    };
    IsolatedAdaptiveCardExtensionService.prototype.sendInitialize = function (newInstanceId, manifestId) {
        this._sendMessage(this._getIsolatedFrame(newInstanceId), newInstanceId, {
            serviceAction: 'Initialize',
            newInstanceId: newInstanceId,
            manifestId: manifestId
        });
    };
    IsolatedAdaptiveCardExtensionService.prototype.updateACEData = function (instanceId, aceData) {
        if (this._isolatedListeners.has(instanceId)) {
            this._sendMessage(this._getIsolatedFrame(instanceId), instanceId, {
                aceData: aceData,
                instanceId: instanceId,
                serviceAction: 'UpdateACEData'
            });
        }
    };
    IsolatedAdaptiveCardExtensionService.prototype.handleLocationRequest = function (instanceId, location, locationError) {
        this._sendMessage(this._getIsolatedFrame(instanceId), instanceId, {
            location: location,
            locationError: locationError,
            instanceId: instanceId,
            serviceAction: 'LocationResponse'
        });
    };
    /**
     * Notify listeners of a change with the ACE;
     *
     * @param instanceId - ACE instance.
     * @param args - {@link _IsolatedServiceCallbackParameters}
     * @param listenerId - Optional. If provided, only invoke the callback for this listener.
     */
    IsolatedAdaptiveCardExtensionService.prototype._invokeCallback = function (instanceId, args, listenerId) {
        var _a;
        var entry = this._isolatedListeners.get(instanceId);
        this._callbackCache.set(instanceId, args);
        if (entry) {
            if (listenerId) {
                (_a = entry.listeners.get(listenerId)) === null || _a === void 0 ? void 0 : _a.callback(args);
            }
            else {
                entry.listeners.forEach(function (listener) { return listener.callback(args); });
            }
        }
        else {
            this._logError("No entry for ".concat(instanceId));
        }
    };
    /**
     * Trace log an error.
     *
     * @param errorMessage - Message to create a new `Error` object.
     */
    IsolatedAdaptiveCardExtensionService.prototype._logError = function (errorMessage) {
        sp_diagnostics_1._TraceLogger.logError(IsolatedAdaptiveCardExtensionService._logSource, new Error(errorMessage));
    };
    IsolatedAdaptiveCardExtensionService.prototype._getAuthToken = function (applicationId, claims, origin) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('IsolatedAdaptiveCardExtensionService._getAuthToken');
        var configurableTokenProvider = sp_http_base_1._AadTokenProviders.configurable;
        if (!configurableTokenProvider._oboThirdPartyTokenCallback) {
            qosMonitor.writeUnexpectedFailure('oboThirdPartTokenCallbackUndefined');
            this._logError('Unexpected message: oboThirdPartyTokenCallback is not defined.');
            return;
        }
        configurableTokenProvider._oboThirdPartyTokenCallback(applicationId, claims)
            .then(function (token) {
            var originURL = new URL(origin);
            var isolatedFrame = _this._isolatedFrames.get(originURL.hostname);
            _this._sendMessage(isolatedFrame, '', // instanceId not associated with obo token call back flow.
            {
                token: token,
                applicationId: applicationId,
                serviceAction: 'OBOToken'
            });
            qosMonitor.writeSuccess();
        })
            .catch(function (err) {
            qosMonitor.writeUnexpectedFailure('oboThirdPartTokenCallbackFailure');
            _this._logError("Unexpected message: ".concat(JSON.stringify(err)));
        });
    };
    IsolatedAdaptiveCardExtensionService.prototype._getIsolatedFrame = function (instanceId) {
        var entry = this._isolatedListeners.get(instanceId);
        return entry ? this._isolatedFrames.get(entry.isolatedDomain) : undefined;
    };
    IsolatedAdaptiveCardExtensionService.prototype._postOrQueueMessage = function (isolatedFrame, message, instanceId) {
        if (isolatedFrame.isReady) {
            message.messageType = 'serviceMessage';
            isolatedFrame.iframe.contentWindow.postMessage(message, '*');
        }
        else {
            isolatedFrame.messageQueue.push([instanceId, message]);
        }
    };
    IsolatedAdaptiveCardExtensionService.prototype._sendMessage = function (isolatedFrame, instanceId, message) {
        if (isolatedFrame) {
            this._postOrQueueMessage(isolatedFrame, message, instanceId);
        }
        else {
            this._logError("No entry for ".concat(instanceId));
        }
    };
    IsolatedAdaptiveCardExtensionService.serviceKey = sp_core_library_1.ServiceKey.create('sp-adaptive-card-extension-base::IsolatedAdaptiveCardExtensionService', IsolatedAdaptiveCardExtensionService);
    IsolatedAdaptiveCardExtensionService._logSource = { id: 'IsolatedAdaptiveCardExtensionService' };
    return IsolatedAdaptiveCardExtensionService;
}());
exports.IsolatedAdaptiveCardExtensionService = IsolatedAdaptiveCardExtensionService;
//# sourceMappingURL=IsolatedAdaptiveCardExtensionService.js.map