"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.BaseView = void 0;
/**
 * Base class for all views.
 *
 * @remarks No third-party views should inherit from this class.
 *
 * @public
 * @sealed
 */
var BaseView = /** @class */ (function () {
    function BaseView() {
    }
    Object.defineProperty(BaseView.prototype, "cardNavigator", {
        /**
         * See {@link BaseAdaptiveCardExtension.cardNavigator}.
         *
         * @readonly
         */
        get: function () {
            return this._ace.cardNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "quickViewNavigator", {
        /**
         * See {@link BaseAdaptiveCardExtension.quickViewNavigator}.
         *
         * @readonly
         */
        get: function () {
            return this._ace.quickViewNavigator;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "properties", {
        /**
         * See {@link BaseAdaptiveCardExtension.properties}.
         */
        get: function () {
            return this._properties;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "state", {
        /**
         * See {@link BaseAdaptiveCardExtension.state}.
         */
        get: function () {
            return this._state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "cardSize", {
        /**
         * See {@link BaseAdaptiveCardExtension.cardSize}.
         */
        get: function () {
            return this._getCardSize();
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(BaseView.prototype, "context", {
        /**
         * See {@link BaseAdaptiveCardExtension.context}.
         */
        get: function () {
            return this._context;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Action handler for Adaptive Card Actions.
     *
     * @param action - The {@link IActionArguments} for the current event.
     */
    BaseView.prototype.onAction = function (action) {
        // no-op
    };
    /**
     * @beta
     *
     * Error handler for Adaptive Card Actions.
     *
     * @param error - The {@link IActionErrorArguments} for the current event.
     */
    BaseView.prototype.onActionError = function (error) {
        // no-op
    };
    /**
     * See {@link BaseAdaptiveCardExtension.setState}.
     */
    BaseView.prototype.setState = function (newState) {
        this._ace.setState(newState);
    };
    /**
     * Sets visibility to false and rerenders the card.
     * See {@link BaseAdaptiveCardExtension.isVisible}.
     */
    BaseView.prototype.setVisibility = function (isVisible) {
        this._ace.isVisible = isVisible;
    };
    return BaseView;
}());
exports.BaseView = BaseView;
//# sourceMappingURL=BaseView.js.map