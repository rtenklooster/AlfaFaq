"use strict";
/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports._PreviewUtility = exports.EMPTY_GUIDS = exports.CACHE_BREAKPOINT_S = exports.PUBLIC_CACHE_BREAKPOINT_S = exports.MAX_PIXEL_RATIO = void 0;
var tslib_1 = require("tslib");
var lodash = tslib_1.__importStar(require("@microsoft/sp-lodash-subset"));
var SPAlternativeUrls = tslib_1.__importStar(require("@ms/odsp-utilities/lib/alternativeUrls/SPAlternativeUrls"));
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var ThumbnailUrlGenerator_1 = tslib_1.__importDefault(require("./ThumbnailUrlGenerator"));
var PreviewHelper_1 = require("./PreviewHelper");
var SPResourcePath_1 = require("./SPResourcePath");
var ThumbnailHealingKillSwitches_1 = require("./ThumbnailHealingKillSwitches");
/**
 * SP item ids (web, site, list and file) based vroom API template
 */
var VROOM_API_IDS_TEMPLATE = '{.spHost}/_api/v2.1/sites/{DomainName},{SPSite.Id},{SPWeb.Id}/lists/{SPList.Id}/items/{SPListItem.UniqueId}/driveItem';
/**
 * SP item ids (web, site and file) based vroom API template
 */
var VROOM_API_3_IDS_TEMPLATE = '{.spHost}/_api/v2.1/sites/{DomainName},{SPSite.Id},{SPWeb.Id}/items/{SPListItem.UniqueId}/driveItem';
/**
 * share API based VROOM API template
 */
var VROOM_API_SHARE_TEMPLATE = '{.spHost}/_api/v2.1/shares/u!{.base64EncodedResourceUrl}/driveItem';
exports.MAX_PIXEL_RATIO = 2;
exports.PUBLIC_CACHE_BREAKPOINT_S = 200;
exports.CACHE_BREAKPOINT_S = 400;
var CACHE_BREAKPOINT_M = 960;
var CACHE_BREAKPOINT_L = 1600;
var CACHE_BREAKPOINT_XL = 2560;
exports.EMPTY_GUIDS = new Set()
    .add('00000000-0000-0000-0000-000000000000')
    .add('00000000000000000000000000000000')
    .add('{00000000-0000-0000-0000-000000000000}')
    .add('{00000000000000000000000000000000}');
/**
 * Internal Utility for PreviewHelper and ThumbnailUrlGenerator class
 * @internal
 */
// tslint:disable-next-line:class-name export-name
var _PreviewUtility = /** @class */ (function () {
    function _PreviewUtility() {
    }
    Object.defineProperty(_PreviewUtility, "smallestBreakPointWidth", {
        get: function () {
            return exports.CACHE_BREAKPOINT_S;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_PreviewUtility, "getPreviewSupportedMap", {
        get: function () {
            return _PreviewUtility._getPreviewSupportedMap;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Returns alternate URL for the given URL. It takes care of encoded/decoded URL.
     *
     * @param resourcePath - Relative path of the SharePoint resource. It works for
     * absolute URL but recommended to use relative Url as authority is always subject
     * to change upon tenant migration.
     * @param width - Optional width if provided will be appended as width query parameter
     * @param height - Optional height if provided will be appended as width query parameter
     * @param originalWidth - Width of the source image
     * @param originalHeight - Height of the source image
     * @param cropMode - Style of cropping requested
     * @param viewportTop - Top position for the sub-image to start
     * @param viewportLeft - Left position for the sub-image to start
     * @param viewportWidth - Width of the sub-image
     * @param viewportHeight - Height of the sub-image
     */
    _PreviewUtility.getAlternateUrl = function (resourcePath, width, height, originalWidth, originalHeight, cropMode, viewportTop, viewportLeft, viewportWidth, viewportHeight) {
        if ((0, ThumbnailHealingKillSwitches_1.isCDNRewriteKSActivated)()) {
            return undefined;
        }
        // contract of getPriverImageUrl is not well defined. It is possible that the method is called
        // with either encoded or decoded URI. The key in the map is produced on the server,
        // hence, if the original URI was decoded on the client, we need to check whether the original
        // encoded URI was used as a key.
        // this is mostly redundant call, but it is a cheap enough workaround to avoid changing the logic
        // in every place the helper is being invoked from.
        var alternativeUrl = SPAlternativeUrls.tryGetAlternativeUrl(resourcePath.value) ||
            SPAlternativeUrls.tryGetAlternativeUrl(encodeURI(resourcePath.value));
        if (!alternativeUrl) {
            try {
                alternativeUrl = SPAlternativeUrls.tryGetAlternativeUrl(decodeURI(resourcePath.value));
            }
            catch (error) {
                /* no op */
            }
        }
        if (!alternativeUrl) {
            if (resourcePath.authority) {
                var relativePath = resourcePath.path;
                alternativeUrl =
                    SPAlternativeUrls.tryGetAlternativeUrl(relativePath) ||
                        SPAlternativeUrls.tryGetAlternativeUrl(encodeURI(relativePath));
                if (!alternativeUrl) {
                    try {
                        alternativeUrl = SPAlternativeUrls.tryGetAlternativeUrl(decodeURI(relativePath));
                    }
                    catch (error) {
                        /* no op */
                    }
                }
            }
        }
        if (alternativeUrl &&
            width !== undefined &&
            !isNaN(width) &&
            ThumbnailUrlGenerator_1.default.isFileTypeSupported(_PreviewUtility.getFileExtension(resourcePath))) {
            var url = new SPResourcePath_1._SPResourcePath(alternativeUrl);
            // Map width to the nearest resolution breakpoint, if no height requested
            if (height === undefined || isNaN(height)) {
                width = _PreviewUtility.normalizeWidth(width);
            }
            if (width !== undefined) {
                url.searchParams.set('width', Math.round(width).toString());
            }
            if (height !== undefined && !isNaN(height)) {
                var normalizedHeight = _PreviewUtility.normalizeHeight(height);
                if (normalizedHeight !== undefined) {
                    url.searchParams.set('height', normalizedHeight.toString());
                }
            }
            if (viewportTop !== undefined &&
                viewportLeft !== undefined &&
                viewportWidth !== undefined &&
                viewportHeight !== undefined) {
                url.searchParams.set(_PreviewUtility.VIEWPORT_PARAMETER_LEFT, viewportLeft.toString());
                url.searchParams.set(_PreviewUtility.VIEWPORT_PARAMETER_TOP, viewportTop.toString());
                url.searchParams.set(_PreviewUtility.VIEWPORT_PARAMETER_WIDTH, viewportWidth.toString());
                url.searchParams.set(_PreviewUtility.VIEWPORT_PARAMETER_HEIGHT, viewportHeight.toString());
            }
            if (cropMode !== undefined) {
                url.searchParams.set(_PreviewUtility.CROPMODE_PARAMETER, cropMode);
            }
            if (originalWidth !== undefined && originalHeight !== undefined) {
                url.searchParams.set(_PreviewUtility.ORIGINAL_WIDTH_PARAMETER, originalWidth.toString());
                url.searchParams.set(_PreviewUtility.ORIGINAL_HEIGHT_PARAMETER, originalHeight.toString());
            }
            alternativeUrl = url.toString();
        }
        return alternativeUrl;
    };
    /**
     * Normalizes width based on device pixel ration and supported width breakpoints
     */
    _PreviewUtility.normalizeWidth = function (width, isPublicImage) {
        if (isPublicImage === void 0) { isPublicImage = false; }
        return _PreviewUtility._getWidthByMeTACache(Math.round(width), isPublicImage);
    };
    /**
     * Normalizes height based on device pixel ratio
     */
    _PreviewUtility.normalizeHeight = function (height) {
        return !height ? undefined : Math.round(height);
    };
    _PreviewUtility.normalizeWidthToResolution = function (width) {
        return _PreviewUtility._widthToResolution(Math.round(width));
    };
    _PreviewUtility.isImage = function (ext) {
        // make quick lookup table to check if a file type is an image
        if (!_PreviewUtility._imageExtensions) {
            _PreviewUtility._imageExtensions = {};
            _PreviewUtility._createLookupEntries(PreviewHelper_1._PreviewHelper.IMAGE_EXTENSIONS, _PreviewUtility._imageExtensions);
        }
        return !!ext && !!_PreviewUtility._imageExtensions[ext.toLowerCase()];
    };
    _PreviewUtility.isVideo = function (ext) {
        // make quick lookup table to check if a file type is a video
        if (!_PreviewUtility._videoExtensions) {
            _PreviewUtility._videoExtensions = {};
            _PreviewUtility._createLookupEntries(PreviewHelper_1._PreviewHelper.VIDEO_EXTENSIONS, _PreviewUtility._videoExtensions);
        }
        return !!ext && !!_PreviewUtility._videoExtensions[ext.toLowerCase()];
    };
    /**
     * Generate VROOM based thumbnail URL
     * @param vroomItemUrl - VROOM URL representing drive item
     * @param width - Width of the thumbnail
     * @param height - Height of the thumbnail
     * @param resolution - Alternative to width/height
     * @param originalWidth - Width of the source image
     * @param originalHeight - Height of the source image
     * @param cropmode - Style of cropping requested
     * @param viewportTop - Top position for the subimage to start
     * @param viewportLeft - Left position for the subimage to start
     * @param viewportWidth - Width of the subimage
     * @param viewportHeight - Height of the subimage
     */
    _PreviewUtility.getVROOMThumbnailUrl = function (vroomItemUrl, width, height, resolution, originalWidth, originalHeight, cropMode, viewportTop, viewportLeft, viewportWidth, viewportHeight) {
        // TODO: VSO#683066 Allow specifying only width or height when generating a scaled thumbnail
        var largeDummyDimension = 99999;
        var normalizedDimension = this.normalizeDimension(width, height, resolution);
        var finalWidth;
        var finalHeight;
        if (vroomItemUrl) {
            if (normalizedDimension.width || normalizedDimension.height) {
                finalWidth = normalizedDimension.width || largeDummyDimension;
                finalHeight = normalizedDimension.height || largeDummyDimension;
            }
            else {
                finalWidth = _PreviewUtility.smallestBreakPointWidth;
                finalHeight = largeDummyDimension;
            }
            var viewportParams = viewportLeft !== undefined &&
                viewportTop !== undefined &&
                viewportWidth !== undefined &&
                viewportHeight !== undefined
                ? "&".concat(_PreviewUtility.VIEWPORT_PARAMETER_LEFT, "=").concat(viewportLeft, "&").concat(_PreviewUtility.VIEWPORT_PARAMETER_TOP, "=").concat(viewportTop, "&").concat(_PreviewUtility.VIEWPORT_PARAMETER_WIDTH, "=").concat(viewportWidth, "&").concat(_PreviewUtility.VIEWPORT_PARAMETER_HEIGHT, "=").concat(viewportHeight)
                : '';
            var cropModeParams = width !== undefined && height !== undefined && cropMode !== undefined
                ? "&".concat(_PreviewUtility.CROPMODE_PARAMETER, "=").concat(cropMode)
                : '';
            var originalWidthHeightParams = originalWidth !== undefined && originalHeight !== undefined
                ? "&".concat(_PreviewUtility.ORIGINAL_WIDTH_PARAMETER, "=").concat(originalWidth, "&").concat(_PreviewUtility.ORIGINAL_HEIGHT_PARAMETER, "=").concat(originalHeight)
                : '';
            return "".concat(vroomItemUrl, "/thumbnails/0/c").concat(finalWidth, "x").concat(finalHeight, "/content?preferNoRedirect=true&").concat(_PreviewUtility.PREFER, "=").concat(_PreviewUtility.EXTEND_CACHE_MAXAGE, "&").concat(_PreviewUtility.CLIENT_TYPE, "=").concat(_PreviewUtility.MODERN_WEB_PART).concat(viewportParams).concat(cropModeParams).concat(originalWidthHeightParams);
        }
        return undefined;
    };
    /**
     * Generates VROOM Item URL for given resource.
     * @param siteId - SiteId of the resource, required if spResourcePath is not provided
     * @param webId - WebId of the resource, required if spResourcePath is not provided
     * @param listId - listId of the resource, required if spResourcePath is not provided
     * @param uniqueId - uniqueId of the resource, required if spResourcePath is not provided
     * @param spHostBaseUrl - Base URL to the SP Host
     * @param domainName - Domain name of the SP Host, required if spResourcePath is not provided
     * @param spResourcePath - Path to the resource. used when Guids are not available.
     * @param callerId - Identification of the caller. This will be used for telemetry purpose only.
     */
    _PreviewUtility.getVROOMItemUrl = function (siteId, webId, listId, uniqueId, spHostBaseUrl, domainName, spResourcePath, callerId) {
        var vroomItemUrl;
        if (spHostBaseUrl &&
            domainName &&
            siteId &&
            webId &&
            listId &&
            uniqueId &&
            !exports.EMPTY_GUIDS.has(uniqueId) &&
            !exports.EMPTY_GUIDS.has(siteId) &&
            !exports.EMPTY_GUIDS.has(listId) &&
            !exports.EMPTY_GUIDS.has(webId)) {
            vroomItemUrl = VROOM_API_IDS_TEMPLATE.replace('{.spHost}', spHostBaseUrl);
            vroomItemUrl = vroomItemUrl.replace('{DomainName}', domainName);
            vroomItemUrl = vroomItemUrl.replace('{SPSite.Id}', siteId);
            vroomItemUrl = vroomItemUrl.replace('{SPWeb.Id}', webId);
            listId = lodash.trimEnd(lodash.trimStart(listId, '{'), '}');
            vroomItemUrl = vroomItemUrl.replace('{SPList.Id}', listId);
            uniqueId = lodash.trimEnd(lodash.trimStart(uniqueId, '{'), '}');
            vroomItemUrl = vroomItemUrl.replace('{SPListItem.UniqueId}', uniqueId);
        }
        else if (spHostBaseUrl &&
            domainName &&
            siteId &&
            webId &&
            uniqueId &&
            !exports.EMPTY_GUIDS.has(uniqueId) &&
            !exports.EMPTY_GUIDS.has(siteId) &&
            !exports.EMPTY_GUIDS.has(webId)) {
            vroomItemUrl = VROOM_API_3_IDS_TEMPLATE.replace('{.spHost}', spHostBaseUrl);
            vroomItemUrl = vroomItemUrl.replace('{DomainName}', domainName);
            vroomItemUrl = vroomItemUrl.replace('{SPSite.Id}', siteId);
            vroomItemUrl = vroomItemUrl.replace('{SPWeb.Id}', webId);
            uniqueId = lodash.trimEnd(lodash.trimStart(uniqueId, '{'), '}');
            vroomItemUrl = vroomItemUrl.replace('{SPListItem.UniqueId}', uniqueId);
        }
        else if (spHostBaseUrl && spResourcePath) {
            // TODO: Replace with shares: template but caution is not supported for .aspx Site Page
            if (spResourcePath.indexOf('?') > -1) {
                // Collect data for analysis
                var qosMonitor = new sp_diagnostics_1._QosMonitor('ThumbnailRequestWithQuery');
                qosMonitor.writeSuccess({
                    service: callerId || 'Unknown',
                    source: spResourcePath
                });
                spResourcePath = spResourcePath.split('?')[0];
            }
            if (spResourcePath.indexOf('#') > -1) {
                // Collect data for analysis
                var qosMonitor = new sp_diagnostics_1._QosMonitor('ThumbnailRequestWithHash');
                qosMonitor.writeSuccess({
                    service: callerId || 'Unknown',
                    source: spResourcePath
                });
            }
            var resourcePath = new SPResourcePath_1._SPResourcePath(spResourcePath);
            var absolutePath = spResourcePath;
            if (absolutePath.indexOf('%2F') > -1 || absolutePath.indexOf('%2f') > -1) {
                absolutePath = decodeURIComponent(absolutePath);
            }
            if (resourcePath.format !== SPResourcePath_1._SPResourcePathFormat.absolute) {
                // Convert to absolute path
                absolutePath = "".concat(spHostBaseUrl).concat(absolutePath[0] !== '/' && absolutePath[0] !== '\\' ? '/' : '').concat(absolutePath);
            }
            var base64ResourcePath = !(0, ThumbnailHealingKillSwitches_1.isUrlGlobalReplaceKSActivated)()
                ? lodash
                    .trimEnd(btoa(unescape(encodeURIComponent(absolutePath))), '=')
                    .replace(/\+/g, '-')
                    .replace(/\//g, '_')
                : !(0, ThumbnailHealingKillSwitches_1.isQuickLinksThumbnailViewKSActivated)()
                    ? lodash
                        .trimEnd(btoa(unescape(encodeURIComponent(absolutePath))), '=')
                        .replace('+', '-')
                        .replace('/', '_')
                    : lodash.trimEnd(lodash.trimEnd(btoa(unescape(encodeURIComponent(absolutePath))), '='), '='.replace('+', '-').replace('/', '_'));
            vroomItemUrl = VROOM_API_SHARE_TEMPLATE.replace('{.spHost}', spHostBaseUrl).replace('{.base64EncodedResourceUrl}', base64ResourcePath);
        }
        return vroomItemUrl;
    };
    /**
     * Update VROOM custom thumbnail width after normalizing given width by MeTA cache size
     * @param thumbnailUrl - Original VROOM thumbnail url
     * @param newWidth - new raw width to be updated
     */
    _PreviewUtility.updateVROOMCustomThumbnailSize = function (thumbnailUrl, newWidth) {
        if (!thumbnailUrl || isNaN(newWidth) || newWidth <= 0) {
            return thumbnailUrl;
        }
        var lowercaseUrl = thumbnailUrl.toLowerCase();
        var index = lowercaseUrl.indexOf(_PreviewUtility.THUMBNAIL_SIZE_PREFIX);
        if (index < 0) {
            return thumbnailUrl;
        }
        var endIndex = thumbnailUrl.indexOf('x', index + _PreviewUtility.THUMBNAIL_SIZE_PREFIX.length);
        if (endIndex <= index) {
            return thumbnailUrl;
        }
        var original = thumbnailUrl.substr(index, endIndex - index);
        return thumbnailUrl.replace(original, "".concat(_PreviewUtility.THUMBNAIL_SIZE_PREFIX).concat(this.normalizeWidth(newWidth)));
    };
    /**
     * Get VROOM thumbnail custom width if specified undefined otherwise
     * @param thumbnailUrl - Original VROOM thumbnail url
     */
    _PreviewUtility.getVROOMThumbnailWidth = function (thumbnailUrl) {
        if (thumbnailUrl === '') {
            return undefined;
        }
        var lowercaseUrl = thumbnailUrl.toLowerCase();
        var index = lowercaseUrl.indexOf(_PreviewUtility.THUMBNAIL_SIZE_PREFIX);
        if (index < 0) {
            return undefined;
        }
        var endIndex = thumbnailUrl.indexOf('x', index + _PreviewUtility.THUMBNAIL_SIZE_PREFIX.length);
        if (endIndex <= index) {
            return undefined;
        }
        index = index + _PreviewUtility.THUMBNAIL_SIZE_PREFIX.length;
        return Number(thumbnailUrl.substr(index, endIndex - index));
    };
    /**
     * Normalize requested width and height to closest breakpoint respecting device pixel ratio
     * When width and height both dimension are specified, it is not mapped to break point
     * Such scenarios URL performance might be slow compared to request by width or height
     * @param width - Requested width of the thumbnail
     * @param height  - Requested height of the thumbnail
     * @param resolution - Alternative legacy docviz dimension
     */
    _PreviewUtility.normalizeDimension = function (width, height, resolution) {
        if (!height && width) {
            width = _PreviewUtility.normalizeWidth(width);
        }
        else if (height && !width) {
            height = _PreviewUtility.normalizeWidth(height);
        }
        else if (width && height) {
            width = Math.round(width);
            height = Math.round(height);
            // Since client has requested specific aspect ratio, we will not map to the breakpoint width
        }
        else if (resolution !== undefined) {
            width = this.getWidthByResolution(resolution);
        }
        else {
            // Caller did not specify any dimension, will default to smallest breakpoint
            width = _PreviewUtility.smallestBreakPointWidth;
        }
        return { width: width, height: height };
    };
    /**
     * Extracts the filename extension based on file path (supports url).
     * @param path - _SPResourcePath of the object.
     */
    _PreviewUtility.getFileExtension = function (path) {
        if (!path) {
            return undefined;
        }
        var extensionStart = path.path.lastIndexOf('.');
        if (extensionStart > -1) {
            return path.path.substr(extensionStart + 1).toLowerCase();
        }
        return undefined;
    };
    /**
     * Maps given resolution to the max width
     */
    _PreviewUtility.getWidthByResolution = function (resolution) {
        if (isNaN(resolution)) {
            return 300;
        }
        var width = 300;
        switch (resolution) {
            case 0:
                width = 300;
                break;
            case 1:
                width = 480;
                break;
            case 2:
                width = 750;
                break;
            case 3:
                width = 1024;
                break;
            case 4:
                width = 1600;
                break;
            case 5:
            case 6:
                width = 2560;
                break;
        }
        return width;
    };
    _PreviewUtility._widthToResolution = function (width) {
        if (width === undefined || isNaN(width)) {
            // No resolution will be the same as 300px
            return undefined;
        }
        var resolution = 0;
        if (width <= 300) {
            resolution = 0;
        }
        else if (width <= 480) {
            resolution = 1;
        }
        else if (width <= 750) {
            resolution = 2;
        }
        else if (width <= 1024) {
            resolution = 3;
        }
        else if (width <= 1600) {
            resolution = 4;
        }
        else {
            resolution = 5;
        }
        return resolution;
    };
    _PreviewUtility._createLookupEntries = function (extensions, lookup) {
        for (var i = 0; i < extensions.length; i++) {
            lookup[extensions[i]] = true;
        }
    };
    /**
     * Convert requested width to nearest breakpoint supported by MeTA cache.
     * @param width - Requested width
     * @param isPublicImage - When true it is not restricted to MeTA cache size
     */
    _PreviewUtility._getWidthByMeTACache = function (width, isPublicImage) {
        if (isPublicImage === void 0) { isPublicImage = false; }
        var smallestBreakPointWidth = _PreviewUtility.smallestBreakPointWidth;
        if (width === undefined || isNaN(width)) {
            return smallestBreakPointWidth;
        }
        if (isPublicImage && width <= exports.PUBLIC_CACHE_BREAKPOINT_S) {
            return exports.PUBLIC_CACHE_BREAKPOINT_S;
        }
        else if (width <= smallestBreakPointWidth) {
            return smallestBreakPointWidth;
        }
        else if (width <= CACHE_BREAKPOINT_M) {
            return CACHE_BREAKPOINT_M;
        }
        else if (width <= CACHE_BREAKPOINT_L) {
            return CACHE_BREAKPOINT_L;
        }
        else {
            return CACHE_BREAKPOINT_XL;
        }
    };
    _PreviewUtility.CLIENT_TYPE = 'clientType';
    _PreviewUtility.MODERN_WEB_PART = 'modernWebPart';
    _PreviewUtility.PREFER = 'prefer';
    _PreviewUtility.EXTEND_CACHE_MAXAGE = 'extendCacheMaxAge';
    _PreviewUtility.THUMBNAIL_SIZE_PREFIX = '/thumbnails/0/c';
    /**
     * List of file types supported by Media TA service for thumbnail
     */
    _PreviewUtility.mediaServiceSupportedMap = new Set([
        'doc',
        'docx',
        'xlsb',
        'xlsx',
        'xlsm',
        'xltx',
        'xls',
        'ppt',
        'pptx',
        'pptm',
        'potx',
        'potm',
        'pot',
        'ppsx',
        'ppsxm',
        'pps',
        'odt',
        'ods',
        'odp',
        'rtf',
        'csv',
        // openxmlrasterizer
        'pano',
        'fppx',
        'hcp',
        // email
        'eml',
        'msg',
        // imagemagickrasterizer
        'ai',
        'cur',
        'epdf',
        'epi',
        'eps',
        'epsf',
        'epsi',
        'ico',
        'icon',
        'log',
        'mat',
        'pdf',
        'pdfa',
        'pict',
        'ps',
        'psb',
        'psd',
        'svg',
        'svgz',
        'txt',
        'xbm',
        'xcf',
        'xpm',
        // video rasterizer
        'mts',
        'm2ts',
        'mpg',
        'mpeg',
        'mp4',
        'mov',
        'wmv',
        'avi',
        'asf',
        'm4v',
        '3gp',
        '3g2',
        '3gp2',
        '3gpp',
        'm1v',
        'm2v',
        'ts',
        'mp4v',
        'ogg',
        'webm',
        'movie',
        // thumbnailinterop
        'bmp',
        'png',
        // ico exists under imagemagickrasterizer above
        'jpeg',
        'jpg',
        'jfif',
        'tiff',
        'tif',
        // 'gif', // excluded to support animated gifs
        'wmp',
        'arw',
        'cr2',
        'erf',
        'mef',
        'mrw',
        'nef',
        'orf',
        'nrw',
        'pef',
        'raw',
        'rw2',
        'rw1',
        'sr2',
        // 3d files
        'cool',
        'fbx',
        'obj',
        'ply',
        'stl',
        '3mf',
        'glb',
        // dicom rasterizer
        'dcm',
        'dcm30',
        'dic',
        'dicm',
        'dicom'
    ]);
    // https://en.wikipedia.org/wiki/Comparison_of_web_browsers#Image_format_support
    _PreviewUtility._browserViewableImageExtensions = [
        'bmp',
        'jpeg',
        'jpg',
        'png',
        'svg',
        'tif',
        'tiff'
    ];
    _PreviewUtility._getPreviewSupportedMap = new Set([
        '3gp',
        '3g2',
        '3gp2',
        'asf',
        'ai',
        'aspx',
        'avi',
        'docm',
        'docx',
        'dotx',
        'dotm',
        'dv',
        'emf',
        'eps',
        // 'gif', // excluded to support animated gifs
        'ismv',
        'm2v',
        'm2ts',
        'mov',
        'mod',
        'mp4',
        'mpeg',
        'mpg',
        'mts',
        'pdf',
        'pptm',
        'pptx',
        'potm',
        'potx',
        'ppsm',
        'ppsx',
        'psd',
        'ts',
        'vob',
        'wmf',
        'wmv',
        'xesc',
        'xlsm',
        'xlsx'
    ].concat(_PreviewUtility._browserViewableImageExtensions));
    _PreviewUtility.VIEWPORT_PARAMETER_TOP = 'vt';
    _PreviewUtility.VIEWPORT_PARAMETER_LEFT = 'vl';
    _PreviewUtility.VIEWPORT_PARAMETER_WIDTH = 'vw';
    _PreviewUtility.VIEWPORT_PARAMETER_HEIGHT = 'vh';
    _PreviewUtility.CROPMODE_PARAMETER = 'cm';
    _PreviewUtility.ORIGINAL_HEIGHT_PARAMETER = 'oh';
    _PreviewUtility.ORIGINAL_WIDTH_PARAMETER = 'ow';
    return _PreviewUtility;
}());
exports._PreviewUtility = _PreviewUtility;
//# sourceMappingURL=PreviewUtility.js.map