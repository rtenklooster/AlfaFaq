"use strict";
/**
 * @copyright Microsoft Corporation. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports._ThumbnailUrlGenerator = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var sp_page_context_1 = require("@microsoft/sp-page-context");
var SPAlternativeUrls = tslib_1.__importStar(require("@ms/odsp-utilities/lib/alternativeUrls/SPAlternativeUrls"));
var CropMode_1 = require("./CropMode");
var PreviewHelper_1 = require("./PreviewHelper");
var PreviewUtility_1 = require("./PreviewUtility");
var SPResourcePath_1 = require("./SPResourcePath");
var ThumbnailProviderType_1 = require("./ThumbnailProviderType");
var ThumbnailHealingKillSwitches_1 = require("./ThumbnailHealingKillSwitches");
var SPAlternativeUrls_1 = require("@ms/odsp-utilities/lib/alternativeUrls/SPAlternativeUrls");
var PreviewUtility_2 = require("./PreviewUtility");
var Uri_1 = tslib_1.__importDefault(require("@ms/odsp-utilities/lib/uri/Uri"));
var PRELOAD_IMAGES_KEY = '_preloadImages';
// VROOM thumbnail URL regex, return thumbnail from alt stream cache if available before redirecting to MeTA
var VROOM_META_CACHE_REGEX = /(\/thumbnails\/\d\/(.*?)\/content\/?(|(\?(.*?)))$)/i;
// Media Thumbnail URL regex. Core service responsible for generating the thumbnail.
var META_REGEX = /(.svc.ms\/transform\/thumbnail\/?(|(\?(.*?)))$)/i;
// Private CDN Url regex.
var PRIVATE_CDN_V1_V2_REGEX = /(privatecdn(.*?).sharepointonline.com\/(.*?)\?(.*?)(_oat_=(.*?)|AuthVer=2)(.*?)$)/i;
// Public CDN Url regex.
var PUBLIC_CDN_REGEX = /(publiccdn(.*?).sharepointonline.com\/(.*?)$)/i;
// Azure Front Door Private CDN (Azure-based) Url regex.
var AFD_PRIVATE_CDN_REGEX = /(\/_vti_bin\/afdcache.ashx\/?(|(\/(.*?)))$)/i;
// getPreview.ashx end point to DocViz service. This service is under deprecation process.
var DOCVIZ_REGEX = /(\/_layouts\/15\/getpreview.ashx\/?(|(\?(.*?)))$)/i;
var AFDCDN_IMAGE_PATH = '/_vti_bin/afdcache.ashx/authitem';
/**
 * Server flight determines environments where MeTA service can be used.
 */
var MEDIATAFORTHUMBNAIL = 'MediaTAForThumbnail';
var MEDIA_HOST_KEY = 'MediaTAThumbnailHostUrl';
/**
 * Key to read Public CDN base URL from the page context
 */
var PUBLIC_CDN_CONTEXT_KEY = 'publicCdnBaseUrl';
/**
 * A contract to represent that Image URL is full width
 */
var FULLWIDTH = 0;
/**
 * Default Images (aka client side stock images) are resolved at runtine using a key
 * which is prefixed by '/_LAYOUTS/IMAGES/
 */
var DEFAULT_IMAGES_PATH_PREFIX = '/_LAYOUTS/IMAGES/';
var MEDIA_PUBLIC_CDN_HOSTNAME = 'media.akamai.odsp.cdn.office.net';
var MEDIA_PUBLIC_CDN_AUTHORITY = "https://".concat(MEDIA_PUBLIC_CDN_HOSTNAME);
var HUBBLE_STOCK_HOSTNAME = 'cdn.hubblecontent.osi.office.net';
// List of known Default stock image host names
var STOCK_HOSTNAME_1 = 'modern.akamai.odsp.cdn.office.net';
var STOCK_HOSTNAME_2 = 'az741266.vo.msecnd.net';
var STOCK_HOSTNAME_3 = 'spoprod-a.akamaihd.net';
var STOCK_HOSTNAME_4 = 'spoppe-a.akamaihd.net';
var STOCK_HOSTNAME_5 = 'az742526.vo.msecnd.net';
var STOCK_HOSTNAME_6 = 'spoppe-b.akamaized.net';
var STOCK_HOSTNAME_7 = 'spoppe-b.azureedge.net';
var STOCK_HOSTNAME_8 = 'spoppe-b2.azureedge.net';
var STOCK_HOSTNAME_9 = 'modernb.akamai.odsp.cdn.office.net';
var STOCK_HOSTNAME_10 = 'modernb.verizon.odsp.cdn.office.net';
var STOCK_HOSTNAME_11 = 'res-1-sdf.cdn.office.net';
var STOCK_HOSTNAME_12 = 'res-2-sdf.cdn.office.net';
var STOCK_HOSTNAME_13 = 'res-1.cdn.office.net';
var STOCK_HOSTNAME_14 = 'res-2.cdn.office.net';
var STOCK_TEST_HOSTNAME_1 = 'resourceseng.blob.core.windows.net'; // TEST Environment
var STOCK_TEST_HOSTNAME_2 = 'odspwebdevdeploy.blob.core.windows.net'; // TEST Environment
var STOCK_HOST_NAMES = new Set()
    .add(STOCK_HOSTNAME_1)
    .add(STOCK_HOSTNAME_2)
    .add(STOCK_HOSTNAME_3)
    .add(STOCK_HOSTNAME_4)
    .add(STOCK_HOSTNAME_5)
    .add(STOCK_HOSTNAME_6)
    .add(STOCK_HOSTNAME_7)
    .add(STOCK_HOSTNAME_8)
    .add(STOCK_HOSTNAME_9)
    .add(STOCK_HOSTNAME_10)
    .add(STOCK_HOSTNAME_11)
    .add(STOCK_HOSTNAME_12)
    .add(STOCK_HOSTNAME_13)
    .add(STOCK_HOSTNAME_14)
    .add(STOCK_TEST_HOSTNAME_1)
    .add(STOCK_TEST_HOSTNAME_2);
var DOCID_PARAM = 'docid';
// tslint:disable:class-name export-name
/**
 * This class is the entry point for requesting thumbnail URL for given sharepoint resource
 * It's behavior depends on the timing of oauth token availability
 *  -It needs oauth token to generate Media Service based thumbnail URL
 *  -At SPPageApp load time, token is requested
 *  -When request arrives for thumbnail, if token is resolved, Media Service url is returned
 *  -If token is not available then getPreview.ashx based url is constructed
 *
 * NOTE: Caller of this API should not log thumbnail url in console or trace logger.
 *
 * @internal
 */
var _ThumbnailUrlGenerator = /** @class */ (function () {
    function _ThumbnailUrlGenerator() {
        var _this = this;
        this._initialize = function (preloadedData) {
            var _a, _b;
            _this._pageContext = _this._serviceScope.consume(sp_page_context_1.PageContext.serviceKey);
            // tslint:disable-next-line: no-any
            var pageContent = _this._pageContext;
            // tslint:disable-next-line: no-any
            var legacyPageContext = (pageContent === null || pageContent === void 0 ? void 0 : pageContent.legacyPageContext) || (pageContent === null || pageContent === void 0 ? void 0 : pageContent._legacyPageContext);
            if (legacyPageContext) {
                var urlTable = SPAlternativeUrls.getUrlTable();
                if (legacyPageContext.MediaTAServiceHostUrl && !urlTable.MediaTAThumbnailHostUrl) {
                    urlTable.MediaTAThumbnailHostUrl = legacyPageContext.MediaTAServiceHostUrl;
                }
                if (legacyPageContext.userPhotoCdnBaseUrl && !urlTable.UserPhotoAspx) {
                    urlTable.UserPhotoAspx = legacyPageContext.userPhotoCdnBaseUrl;
                }
            }
            var initializeAlternativeUrls = !sp_core_library_1._SPKillSwitch.isActivated('9748ceb6-d312-4141-9733-b29ac48f8bcd'
            /* '2021-08-03', 'Initialize the alternative URLs inside thumbnail URL generator'*/
            );
            if (initializeAlternativeUrls && ((_b = (_a = preloadedData === null || preloadedData === void 0 ? void 0 : preloadedData.page) === null || _a === void 0 ? void 0 : _a.Content) === null || _b === void 0 ? void 0 : _b.AlternativeUrlMap)) {
                SPAlternativeUrls.updateMap(preloadedData.page.Content.AlternativeUrlMap);
            }
        };
        this._logSource = sp_diagnostics_1._LogSource.create('ThumbnailUrlGenerator');
    }
    /**
     * Returns true if the file type is supported by media service for thumbnail
     * @param fileType - type (extension) of file to be tested
     * @param includeProofTokenSupport - If true will also include extensions supported with proof token only.
     */
    _ThumbnailUrlGenerator._isFileTypeSupportedByMediaService = function (fileType) {
        if (!sp_core_library_1._SPKillSwitch.isActivated('991c0e1c-05b0-4ecb-af32-6eefb92fe9d7' /* '2021-09-08', 'Remove SVG from META supporting list' */)) {
            // Remove these file type from supported map when graduate the kill switch.
            PreviewUtility_1._PreviewUtility.mediaServiceSupportedMap.delete('svg');
            PreviewUtility_1._PreviewUtility.mediaServiceSupportedMap.delete('svgz');
        }
        return !!fileType && PreviewUtility_1._PreviewUtility.mediaServiceSupportedMap.has(fileType.toLowerCase());
    };
    _ThumbnailUrlGenerator._isViewportNumberValid = function (viewportNumber) {
        if (viewportNumber !== undefined) {
            return !isNaN(viewportNumber);
        }
        return false;
    };
    /**
     * Returns true if given uri's hostname match my site pattern.
     * Note: Any site in the world can have my site pattern. Don't take
     * hard decision based on this method.
     * @param uri - uri under test.
     * @param currentUri - uri of the current host to compare against.
     */
    _ThumbnailUrlGenerator._isMySiteHost = function (uri, currentUri) {
        var MY = '-my.';
        var replaceValue = '.';
        var domain = uri.domain.toLowerCase();
        return domain.indexOf(MY) > -1 && domain.replace(MY, replaceValue) === currentUri.domain.toLowerCase();
    };
    _ThumbnailUrlGenerator._replaceQueryValue = function (url, name, newValue) {
        if (newValue !== undefined) {
            url.setSearchParam(name, newValue.toString());
        }
        else {
            url.searchParams.delete(name);
        }
        return url.toString();
    };
    _ThumbnailUrlGenerator._getSPResourceAuthority = function (request) {
        var webAbsoluteUri = new SPResourcePath_1._SPResourcePath(request.absoluteUrl || '');
        if (request.spResource) {
            var resourcePath = new SPResourcePath_1._SPResourcePath(request.spResource);
            // Is Relative.
            if (resourcePath.format === SPResourcePath_1._SPResourcePathFormat.relative ||
                resourcePath.format === SPResourcePath_1._SPResourcePathFormat.serverRelative) {
                return webAbsoluteUri;
            }
            else {
                return new SPResourcePath_1._SPResourcePath(resourcePath.authority);
            }
        }
        else {
            // If spResource is null for some cases, fallback to web absolute URL.
            return webAbsoluteUri;
        }
    };
    Object.defineProperty(_ThumbnailUrlGenerator, "instance", {
        /** ------------------- PUBLIC ------------------- **/
        get: function () {
            if (this._instance === undefined) {
                this._instance = new _ThumbnailUrlGenerator();
            }
            return this._instance;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Initialize thumbnail url generator service scope.
     */
    _ThumbnailUrlGenerator.prototype.initialize = function (serviceScope, preloadedData) {
        var _this = this;
        if (!this._serviceScope) {
            this._serviceScope = serviceScope;
            this._serviceScope.whenFinished(function () { return _this._initialize(preloadedData); });
        }
        if (preloadedData && preloadedData[MEDIATAFORTHUMBNAIL] !== undefined) {
            this._mediaTAForThumbnailEnabled = !!preloadedData[MEDIATAFORTHUMBNAIL];
        }
    };
    /**
     * Returns true if the file extension is supported for thumbnail
     */
    _ThumbnailUrlGenerator.prototype.isFileTypeSupported = function (fileType) {
        if (!fileType) {
            return false;
        }
        var normalizedType = fileType.toLowerCase();
        // SVG is not rendered correctly when served through preview service or thumbnail service.
        // The SVG images are usually small so we can always display SVG images directly.
        // When this kill switch is graduated, this block should be removed and 'svg' be removed from
        // the file type lists in `_PreviewUtility`.
        if (normalizedType === 'svg') {
            return false;
        }
        return (PreviewUtility_1._PreviewUtility.getPreviewSupportedMap.has(normalizedType) ||
            (this.isVROOMThumbnailEnabled() &&
                (_ThumbnailUrlGenerator._isFileTypeSupportedByMediaService(normalizedType) ||
                    normalizedType === 'aspx')));
    };
    /**
     * Generate user photo URL for specific size.
     * When private CDN is enabled, generated URL is mapped to CDN.
     * @param accountName - User's account name aka email address. e.g. foo\@contoso.com
     * @param size - Parameter may have value Small, Medium or Large, default to Small.
     */
    _ThumbnailUrlGenerator.prototype.getUserPhotoUrl = function (accountName, size) {
        if (size === void 0) { size = SPAlternativeUrls_1.UserPhotoSize.Small; }
        return SPAlternativeUrls.getUserPhotoUrl(accountName, size);
    };
    /**
     * Get thumbnail Url for the given sharepoint resource.
     *
     * Ensure you first check file type is supported via
     * isFileTypeSupported or the code will attempt to fallback to spResource.
     */
    _ThumbnailUrlGenerator.prototype.getThumbnailUrl = function (request, defaultImage) {
        if (!request) {
            throw new Error("Input parameter request is ".concat(request));
        }
        if (request.unknownThumbnailUrl) {
            return this._fromUnknownThumbnailUrl(request, defaultImage);
        }
        if (request.spResource) {
            request.spResource = this._pruneShareUrl(request.spResource);
        }
        var isViewportRequest = this._isViewportParametersSpecified(request);
        /**
         * Skip image preloading for SPImageFlight until
         * preloading considers viewport parameters
         *
         * VSO: 378286
         */
        if (!isViewportRequest) {
            var preloadedImage = this._getPreLoadedImage(request);
            if (preloadedImage) {
                return preloadedImage;
            }
        }
        // Viewport should not be outside the Original Image
        if (isViewportRequest && request.originalWidth && request.originalHeight) {
            // viewport width should be <= the remaining width from left
            request.viewportWidth = Math.min(request.viewportWidth, request.originalWidth - request.viewportLeft);
            // viewport height should be <= the remaining height from top
            request.viewportHeight = Math.min(request.viewportHeight, request.originalHeight - request.viewportTop);
        }
        // TODO: Refactor into separate method
        var provider;
        if (request.spResource) {
            provider = this.getThumbnailProvider(request.spResource, !!defaultImage);
            switch (provider) {
                case ThumbnailProviderType_1._ThumbnailProviderType.DocViz:
                    return this.fromGetPreview(request.spResource, request.callerId, request.width);
                case ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN:
                    if (SPAlternativeUrls.isAlterantiveUrlFresh(request.spResource)) {
                        return this.updateThumbnailWidth(request.spResource, request.width, provider);
                    }
                    request.spResource = this._getPathFromOptimalUrl(provider, request.spResource);
                    provider = ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost;
                    break;
                case ThumbnailProviderType_1._ThumbnailProviderType.MeTA:
                case ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache:
                case ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNOptimalLayoutsImage:
                    return this.updateThumbnailWidth(request.spResource, request.width, provider);
                case ThumbnailProviderType_1._ThumbnailProviderType.External:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNLayoutsImage:
                    return this._enableStockImageThumbnailFlight()
                        ? this._getPublicCDNMeTAUrl(request.spResource, request)
                        : request.spResource;
                case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail:
                    return this._updateHubbleThumbnailWidth(request);
                case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStock:
                    return this._getPublicCDNMeTAUrl(request.spResource, request);
                case ThumbnailProviderType_1._ThumbnailProviderType.SPOLayoutsImage:
                    return this._enableStockImageThumbnailFlight()
                        ? this._getPublicCDNMeTAUrl(this._rewriteOptimalLayoutsImageUrl(request), request)
                        : this._rewriteOptimalLayoutsImageUrl(request);
                default:
                    break;
            }
        }
        if (defaultImage || provider === ThumbnailProviderType_1._ThumbnailProviderType.Stock) {
            return this._getPublicCDNMeTAUrl(defaultImage || request.spResource, request);
        }
        if (this._isLayoutsPath(request.spResource)) {
            return request.spResource;
        }
        var isAspx = false;
        if (request.fileType) {
            isAspx = request.fileType.toLowerCase() === 'aspx';
        }
        // Site page thumbnail needs to go through getPreview.
        if (request.thumbnail && !isAspx) {
            return request.thumbnail;
        }
        var cdnUrl = this.getCDNUrl(request);
        if (cdnUrl) {
            return cdnUrl;
        }
        var vroomThumbnailUrl = this.getVROOMThumbnailUrl(request, provider);
        if (vroomThumbnailUrl) {
            return vroomThumbnailUrl;
        }
        var docVizUrl = this.getDocVizUrl(request, provider);
        if (docVizUrl) {
            return docVizUrl;
        }
        return request.spResource;
    };
    Object.defineProperty(_ThumbnailUrlGenerator.prototype, "publicCDNBaseUrl", {
        /**
         * Get base public CDN Url
         */
        get: function () {
            var _a, _b;
            return (_b = (_a = this._pageContext) === null || _a === void 0 ? void 0 : _a.legacyPageContext) === null || _b === void 0 ? void 0 : _b[PUBLIC_CDN_CONTEXT_KEY];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(_ThumbnailUrlGenerator.prototype, "mediaCDNBaseUrl", {
        get: function () {
            return MEDIA_PUBLIC_CDN_AUTHORITY;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Always use getThumbnailUrl API except in advanced scenarios
     *
     * Generates VROOM thumbnail URL if applicable or undefined otherwise.
     * @param request - Requested info about thumbnail
     */
    _ThumbnailUrlGenerator.prototype.getVROOMThumbnailUrl = function (request, provider) {
        if (!request) {
            throw new Error("Input parameter request is ".concat(request));
        }
        var isAspx = !!request.fileType && request.fileType.toLowerCase() === 'aspx';
        var resourceAuthority;
        var path = request.spResource;
        if (path) {
            provider =
                provider ||
                    (request.spResource && this.getThumbnailProvider(request.spResource));
            if (provider === ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache) {
                return PreviewUtility_1._PreviewUtility.updateVROOMCustomThumbnailSize(request.spResource, request.width);
            }
            // Lets ensure that resourcePath is indeed SPO resource path
            switch (provider) {
                case ThumbnailProviderType_1._ThumbnailProviderType.MeTA:
                    path = undefined;
                    break;
                case ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN:
                    var cdnPath = new SPResourcePath_1._SPResourcePath(request.spResource);
                    path = "https:/".concat(cdnPath.path);
                    path = path.split('?')[0]; // Get rid of query param
                    break;
                case ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN:
                    var afdPath = new SPResourcePath_1._SPResourcePath(request.spResource);
                    path = "".concat(afdPath.authority).concat(afdPath.path.substr('/_vti_bin/afdcache.ashx/authitem'.length));
                    path = path.split('?')[0]; // Get rid of query param
                    break;
                case ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost:
                case ThumbnailProviderType_1._ThumbnailProviderType.MySite:
                    path = request.spResource;
                    break;
                case ThumbnailProviderType_1._ThumbnailProviderType.External:
                case ThumbnailProviderType_1._ThumbnailProviderType.Stock:
                case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStock:
                case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail:
                case ThumbnailProviderType_1._ThumbnailProviderType.SPOLayoutsImage:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble:
                default:
                    path = undefined;
                    break;
            }
            var resourcePath = new SPResourcePath_1._SPResourcePath(path);
            if (resourcePath.format === SPResourcePath_1._SPResourcePathFormat.absolute) {
                resourceAuthority = new SPResourcePath_1._SPResourcePath(path);
            }
        }
        // If file type is not supported by MeTA, it is most likely to fail with getPreview except excel
        // For scenarios where fileType is missing, we are going in favor of MeTa support to reduce getPreview URL.
        // Also for missing fileType there is no guarantee that getPreview will have 100% support.
        var ignoreFileType = !request.fileType;
        var isCroppingRequest = this._isViewportParametersSpecified(request);
        if ((isAspx ||
            _ThumbnailUrlGenerator._isFileTypeSupportedByMediaService(request.fileType) ||
            ignoreFileType) &&
            this.isVROOMThumbnailEnabled() &&
            !(0, ThumbnailHealingKillSwitches_1.isVROOMThumbnailRewriteKSActivated)()) {
            resourceAuthority = resourceAuthority || _ThumbnailUrlGenerator._getSPResourceAuthority(request);
            var vroomUrl = PreviewUtility_1._PreviewUtility.getVROOMItemUrl(request.siteId, request.webId, request.listId, request.uniqueId, resourceAuthority.authority, resourceAuthority.host, path);
            // TODO: isCropModeSpecified should be encapsulated within isCroppingRequest. Scoped change now.
            var isCropModeSpecified = request.cropMode && request.cropMode !== CropMode_1.CropMode.Default;
            if (isCroppingRequest || isCropModeSpecified) {
                return PreviewUtility_1._PreviewUtility.getVROOMThumbnailUrl(vroomUrl, request.width, request.height, undefined, request.originalWidth, request.originalHeight, request.cropMode, request.viewportTop, request.viewportLeft, request.viewportWidth, request.viewportHeight);
            }
            else {
                return PreviewUtility_1._PreviewUtility.getVROOMThumbnailUrl(vroomUrl, request.width, request.height);
            }
        }
        return undefined;
    };
    /**
     * Always use getThumbnailUrl API except in advanced scenarios.
     *
     * Generates public or private CDN URl if applicable or undefined otherwise.
     * @param request - Requested info about thumbnail
     */
    _ThumbnailUrlGenerator.prototype.getCDNUrl = function (request) {
        if (!request) {
            throw new Error("Input parameter request is ".concat(request));
        }
        if (request.spResource) {
            return PreviewUtility_1._PreviewUtility.getAlternateUrl(new SPResourcePath_1._SPResourcePath(request.spResource), request.width, request.height, request.originalWidth, request.originalHeight, request.cropMode, request.viewportTop, request.viewportLeft, request.viewportWidth, request.viewportHeight);
        }
        return undefined;
    };
    /**
     * Always use getThumbnailUrl API except in advanced scenarios.
     *
     * Generates DocViz getPreivew.ashx URL if applicable or undefined otherwise.
     * @param request - Requested info about thumbnail
     * @param provider - Provider of the spResource path if available
     */
    _ThumbnailUrlGenerator.prototype.getDocVizUrl = function (request, provider) {
        if (!request) {
            throw new Error("Input parameter request is ".concat(request));
        }
        // If provided resource path is already optimal like CDN, than extract path from it for rewrite
        if (request.spResource) {
            request.spResource = this._getPathFromOptimalUrl(provider || this.getThumbnailProvider(request.spResource), request.spResource);
        }
        if (!(0, ThumbnailHealingKillSwitches_1.isDocVizUrlRewriteKSActivated)() && this.isFileTypeSupported(request.fileType)) {
            return this._fallbackToGetPreview(request);
        }
        return undefined;
    };
    _ThumbnailUrlGenerator.prototype.updateThumbnailWidth = function (thumbnailUrl, newWidth, provider) {
        if (!thumbnailUrl || newWidth === undefined || isNaN(newWidth) || newWidth <= 0) {
            return thumbnailUrl;
        }
        var normalizedWidth = PreviewUtility_1._PreviewUtility.normalizeWidth(newWidth);
        var thumbnailUri = new SPResourcePath_1._SPResourcePath(thumbnailUrl);
        if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.WIDTH_SHORT)) {
            return _ThumbnailUrlGenerator._replaceQueryValue(thumbnailUri, PreviewHelper_1._PreviewHelper.WIDTH_SHORT, normalizedWidth);
        }
        else if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.WIDTH)) {
            return _ThumbnailUrlGenerator._replaceQueryValue(thumbnailUri, PreviewHelper_1._PreviewHelper.WIDTH, normalizedWidth);
        }
        else if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.RESOLUTION)) {
            return _ThumbnailUrlGenerator._replaceQueryValue(thumbnailUri, PreviewHelper_1._PreviewHelper.RESOLUTION, PreviewUtility_1._PreviewUtility.normalizeWidthToResolution(newWidth));
        }
        else {
            // Width does not exist already, add it
            provider = provider || this.getThumbnailProvider(thumbnailUrl);
            switch (provider) {
                case ThumbnailProviderType_1._ThumbnailProviderType.External:
                    return thumbnailUrl;
                case ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache:
                    return PreviewUtility_1._PreviewUtility.updateVROOMCustomThumbnailSize(thumbnailUrl, newWidth);
                case ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault:
                case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble:
                case ThumbnailProviderType_1._ThumbnailProviderType.MeTA:
                    return "".concat(thumbnailUrl).concat(thumbnailUrl.indexOf('?') === -1 ? '?' : '&').concat(PreviewHelper_1._PreviewHelper.WIDTH, "=").concat(normalizedWidth);
                case ThumbnailProviderType_1._ThumbnailProviderType.DocViz:
                    return "".concat(thumbnailUrl, "&").concat(PreviewHelper_1._PreviewHelper.RESOLUTION, "=").concat(PreviewUtility_1._PreviewUtility.normalizeWidthToResolution(newWidth));
                case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail:
                    return this._updateHubbleThumbnailWidth({
                        spResource: thumbnailUrl,
                        width: newWidth,
                        absoluteUrl: '',
                        callerId: 'updateWidth'
                    });
                case ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost:
                case ThumbnailProviderType_1._ThumbnailProviderType.MySite:
                    if (this.isFileTypeSupported(PreviewUtility_1._PreviewUtility.getFileExtension(new SPResourcePath_1._SPResourcePath(thumbnailUrl)))) {
                        return "".concat(thumbnailUrl).concat(thumbnailUrl.indexOf('?') === -1 ? '?' : '&').concat(PreviewHelper_1._PreviewHelper.WIDTH, "=").concat(normalizedWidth);
                    }
            }
        }
        sp_diagnostics_1._TraceLogger.logError(this._logSource, new Error('Could not add width to the URL'), 'updateThumbnailWidth');
        return thumbnailUrl;
    };
    /**
     * Provide requested width of the thumbnail URL
     * Returns 0 if full image URL with confidence or undefined if not sure.
     * @param thumbnailUrl - Thumbnail URL to inspect for width
     */
    _ThumbnailUrlGenerator.prototype.getThumbnailWidth = function (thumbnailUrl, provider) {
        if (thumbnailUrl === '') {
            return undefined;
        }
        try {
            var thumbnailUri = new SPResourcePath_1._SPResourcePath(thumbnailUrl);
            if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.WIDTH_SHORT)) {
                return Number(thumbnailUri.searchParams.get(PreviewHelper_1._PreviewHelper.WIDTH_SHORT));
            }
            else if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.WIDTH)) {
                return Number(thumbnailUri.searchParams.get(PreviewHelper_1._PreviewHelper.WIDTH));
            }
            else if (thumbnailUri.searchParams.has(PreviewHelper_1._PreviewHelper.RESOLUTION)) {
                return PreviewUtility_1._PreviewUtility.getWidthByResolution(Number(thumbnailUri.searchParams.get(PreviewHelper_1._PreviewHelper.RESOLUTION)));
            }
            else {
                // Width does not exist already, add it
                provider = provider || this.getThumbnailProvider(thumbnailUrl);
                switch (provider) {
                    case ThumbnailProviderType_1._ThumbnailProviderType.External:
                        return undefined;
                    case ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache:
                        return PreviewUtility_1._PreviewUtility.getVROOMThumbnailWidth(thumbnailUrl);
                    case ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN:
                    case ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN:
                    case ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN:
                    case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault:
                    case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble:
                    case ThumbnailProviderType_1._ThumbnailProviderType.MeTA:
                        return FULLWIDTH;
                    case ThumbnailProviderType_1._ThumbnailProviderType.DocViz:
                        return 300; // Min width if not specified
                    case ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost:
                    case ThumbnailProviderType_1._ThumbnailProviderType.MySite:
                    case ThumbnailProviderType_1._ThumbnailProviderType.Stock:
                        return FULLWIDTH;
                    case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail:
                        return 300;
                }
            }
            sp_diagnostics_1._TraceLogger.logError(this._logSource, new Error('Could not find for given URL'), 'getThumbnailWidth');
        }
        catch (error) {
            /* Fail safe */
        }
        return undefined;
    };
    /**
     * Get name of the thumbnail provider service for given thumbnail URL.
     * @param thumbnailUrl - Thumbnail URL
     * @param isStockImage - True if caller knows it was generated from DEFAULT_IMAGES_PATH_PREFIX path.
     */
    _ThumbnailUrlGenerator.prototype.getThumbnailProvider = function (thumbnailUrl, isStockImage) {
        var _a, _b;
        if (!thumbnailUrl) {
            return ThumbnailProviderType_1._ThumbnailProviderType.Unknown;
        }
        var thumbnailUri = new SPResourcePath_1._SPResourcePath(thumbnailUrl);
        if (isStockImage || thumbnailUrl.indexOf(DEFAULT_IMAGES_PATH_PREFIX) === 0) {
            return ((_a = thumbnailUri.host) === null || _a === void 0 ? void 0 : _a.toLowerCase()) === MEDIA_PUBLIC_CDN_HOSTNAME
                ? ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault
                : ThumbnailProviderType_1._ThumbnailProviderType.Stock;
        }
        if (thumbnailUri.host === HUBBLE_STOCK_HOSTNAME) {
            var isThumbnail = thumbnailUri.searchParams.has('file') && thumbnailUri.path.indexOf('/thumbnails/') > 0;
            return isThumbnail ? ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail : ThumbnailProviderType_1._ThumbnailProviderType.HubbleStock;
        }
        else if (STOCK_HOST_NAMES.has(thumbnailUri.host)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.Stock;
        }
        if (VROOM_META_CACHE_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache;
        }
        else if (((_b = thumbnailUri.host) === null || _b === void 0 ? void 0 : _b.toLowerCase()) === MEDIA_PUBLIC_CDN_HOSTNAME) {
            var docId = thumbnailUri.getQueryParameter(DOCID_PARAM);
            if (docId) {
                return (docId === null || docId === void 0 ? void 0 : docId.indexOf(HUBBLE_STOCK_HOSTNAME)) > -1
                    ? ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble
                    : this._enableStockImageThumbnailFlight() && this.isLayoutsImage(docId)
                        ? ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNOptimalLayoutsImage
                        : ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault;
            }
            return ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNLayoutsImage;
        }
        else if (META_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.MeTA;
        }
        else if (PRIVATE_CDN_V1_V2_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN;
        }
        else if (PUBLIC_CDN_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN;
        }
        else if (AFD_PRIVATE_CDN_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN;
        }
        else if (DOCVIZ_REGEX.test(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.DocViz;
        }
        else if (this.isLayoutsImage(thumbnailUrl)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.SPOLayoutsImage;
        }
        var currentUri = new SPResourcePath_1._SPResourcePath(window.location.href);
        if (_ThumbnailUrlGenerator._isMySiteHost(thumbnailUri, currentUri)) {
            return ThumbnailProviderType_1._ThumbnailProviderType.MySite;
        }
        var thumbnailHost = thumbnailUri.host || '';
        var currentHost = currentUri.host.toLowerCase();
        if (thumbnailHost.toLowerCase() === currentHost) {
            return ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost;
        }
        // Every relative path is hosted on SharePoint.
        if (thumbnailUri.format !== SPResourcePath_1._SPResourcePathFormat.absolute) {
            return ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost;
        }
        if (thumbnailUri.format === SPResourcePath_1._SPResourcePathFormat.absolute && this._pageContext) {
            return thumbnailUri.isInternalResource(this._pageContext)
                ? ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost
                : ThumbnailProviderType_1._ThumbnailProviderType.External;
        }
        // Either external, vanity domain or other sub domain of SharePoint we could not recognize.
        return ThumbnailProviderType_1._ThumbnailProviderType.Unknown;
    };
    /**
     * Returns true if given URL is public or private CDN
     * @param thumbnailUrl - Thumbnail URL under test
     */
    _ThumbnailUrlGenerator.prototype.isCdnUrl = function (thumbnailUrl) {
        var provider = this.getThumbnailProvider(thumbnailUrl);
        return (provider === ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN ||
            provider === ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN ||
            provider === ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN);
    };
    /**
     * Converts given getPreviewUrl to optimal thumbnail service possible
     * @param getPreviewUrl - getPreview.aspx thumbnail Url
     * @param calledId - Identification of the caller
     * @param width - Requested width of the thumbnail
     */
    _ThumbnailUrlGenerator.prototype.fromGetPreview = function (getPreviewUrl, callerId, width) {
        if (width === void 0) { width = 400; }
        if (!getPreviewUrl) {
            return undefined;
        }
        if (!DOCVIZ_REGEX.test(getPreviewUrl)) {
            return undefined;
        }
        var getPreviewUri = new SPResourcePath_1._SPResourcePath(getPreviewUrl);
        var baseUrl = getPreviewUri.authority;
        if (!baseUrl || baseUrl.length < 5) {
            // Relative URL can rely on current host
            var currentUri = new SPResourcePath_1._SPResourcePath(window.location.href);
            baseUrl = currentUri.authority;
        }
        var request = {
            fileType: getPreviewUri.searchParams.get(PreviewHelper_1._PreviewHelper.EXT) || undefined,
            absoluteUrl: baseUrl,
            spResource: getPreviewUri.searchParams.get(PreviewHelper_1._PreviewHelper.PATH) || undefined,
            siteId: getPreviewUri.searchParams.get(PreviewHelper_1._PreviewHelper.GUID_SITE) || undefined,
            webId: getPreviewUri.searchParams.get(PreviewHelper_1._PreviewHelper.GUID_WEB) || undefined,
            uniqueId: getPreviewUri.searchParams.get(PreviewHelper_1._PreviewHelper.GUID_FILE) || undefined,
            width: width,
            callerId: callerId
        };
        if (!request.fileType && request.spResource) {
            var resource = new SPResourcePath_1._SPResourcePath(request.spResource);
            request.fileType = PreviewUtility_1._PreviewUtility.getFileExtension(resource);
        }
        return this.getThumbnailUrl(request) || getPreviewUrl;
    };
    _ThumbnailUrlGenerator.prototype.isVROOMThumbnailEnabled = function () {
        return (!sp_core_library_1._SPKillSwitch.isActivated('aaa0d161-5c00-4be4-98d2-7147c13548fc'
        /* '2021-12-02', 'VROOM should auto route to DocViz engine if MeTA not available' */
        ) || !!this._mediaTAForThumbnailEnabled);
    };
    /**
     * Returns true if given path represents SPO layouts file
     * e.g. /_layouts/15/images/sitepagethumbnail.png
     * @param resourcePath - Absolute or relative path of the resource
     */
    _ThumbnailUrlGenerator.prototype.isLayoutsImage = function (resourcePath) {
        return !!resourcePath && resourcePath.toLowerCase().indexOf('_layouts/15/images/') > -1;
    };
    /** ------------------- PRIVATE ------------------- **/
    _ThumbnailUrlGenerator.prototype._pruneShareUrl = function (url) {
        // E.g. The share URL like https://microsoft.sharepoint-df.com/_api/v2.1/:i:/r/sites/xxx
        // will be updated to https://microsoft.sharepoint-df.com/_api/v2.1/sites/xxx
        return url.replace(/\/:\w:\/\w/, '');
    };
    /**
     * Converts unknown url to best possible thumbnail service
     * @param request - Requested info about thumbnail
     */
    _ThumbnailUrlGenerator.prototype._fromUnknownThumbnailUrl = function (request, defaultImage) {
        var provider = this.getThumbnailProvider(request.unknownThumbnailUrl, !!defaultImage /* isStockImage */);
        switch (provider) {
            case ThumbnailProviderType_1._ThumbnailProviderType.DocViz:
                return this.fromGetPreview(request.unknownThumbnailUrl, request.callerId, request.width);
            case ThumbnailProviderType_1._ThumbnailProviderType.MeTA:
            case ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache:
            case ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN:
            case ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN:
            case ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN:
            case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault:
            case ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble:
                return this.updateThumbnailWidth(request.unknownThumbnailUrl, request.width, provider);
            case ThumbnailProviderType_1._ThumbnailProviderType.SharePointHost:
            case ThumbnailProviderType_1._ThumbnailProviderType.MySite:
            case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStock:
            case ThumbnailProviderType_1._ThumbnailProviderType.HubbleStockThumbnail:
            case ThumbnailProviderType_1._ThumbnailProviderType.Stock:
            case ThumbnailProviderType_1._ThumbnailProviderType.SPOLayoutsImage:
                // We identified that resource is pointing to something in SharePoint
                // Let API convert it into appropriate thumbnail URL
                if (!request.spResource) {
                    request.spResource = request.unknownThumbnailUrl;
                }
                // Important to set undefined to avoid recursive call here.
                request.unknownThumbnailUrl = undefined;
                return this.getThumbnailUrl(request, defaultImage);
            case ThumbnailProviderType_1._ThumbnailProviderType.Unknown:
                return request.unknownThumbnailUrl;
            default:
                return request.unknownThumbnailUrl;
        }
    };
    _ThumbnailUrlGenerator.prototype._isViewportParametersSpecified = function (request) {
        return (_ThumbnailUrlGenerator._isViewportNumberValid(request.viewportHeight) &&
            _ThumbnailUrlGenerator._isViewportNumberValid(request.viewportWidth) &&
            _ThumbnailUrlGenerator._isViewportNumberValid(request.viewportTop) &&
            _ThumbnailUrlGenerator._isViewportNumberValid(request.viewportLeft));
    };
    /**
     * This method redirects request to GetPreview service as fallback in the event of any failure or delay
     */
    _ThumbnailUrlGenerator.prototype._fallbackToGetPreview = function (request) {
        return PreviewHelper_1._PreviewHelper.getPreviewImageUrl(request.fileType, request.thumbnail, request.absoluteUrl, request.spResource, request.siteId, request.webId, request.uniqueId, request.width, false, // isBannerImageUrl
        request.callerId);
    };
    /**
     * Get preloaded preview Url of the image if already loaded
     */
    _ThumbnailUrlGenerator.prototype._getPreLoadedImage = function (request) {
        var preloadedUrl = undefined;
        if (request && request.spResource) {
            var preloadImageDictionary = this._getPreloadedDictionary();
            if (preloadImageDictionary) {
                preloadedUrl = this._readUrlFromDictionary(preloadImageDictionary, request.spResource);
                if (!preloadedUrl) {
                    var path = new SPResourcePath_1._SPResourcePath(request.spResource).path;
                    if (path) {
                        preloadedUrl = this._readUrlFromDictionary(preloadImageDictionary, path);
                    }
                }
            }
        }
        if (sp_core_library_1._SPFlight.isEnabled(1994 /* WEXAkamaiV2PrivateCDNUpdate */) && preloadedUrl) {
            var queryParam = preloadedUrl.split('?');
            if (queryParam[1] && queryParam[1].indexOf('AuthVer=') > -1) {
                request.width = Math.max(this.getThumbnailWidth(preloadedUrl, ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN), request.width);
                return this.getCDNUrl(request); // Regenerate URL with eat and oat
            }
        }
        return this._validateResolution(preloadedUrl, request) ? preloadedUrl : undefined;
    };
    _ThumbnailUrlGenerator.prototype._getPreloadedDictionary = function () {
        var preloadImageDictionary = window[PRELOAD_IMAGES_KEY];
        if (preloadImageDictionary && !this._isDecodedKeyAdded) {
            this._isDecodedKeyAdded = true;
            // e.g. Add key /teams/News/SitePages/Welcome to WEX.aspx for /teams/News/SitePages/Welcome%20to%20WEX.aspx
            for (var urlKey in preloadImageDictionary) {
                if (urlKey) {
                    var decodedUrlKey = void 0;
                    try {
                        decodedUrlKey = decodeURIComponent(urlKey);
                    }
                    catch (_a) {
                        decodedUrlKey = urlKey;
                    }
                    if (decodedUrlKey !== urlKey) {
                        preloadImageDictionary[decodedUrlKey] = preloadImageDictionary[urlKey];
                    }
                }
            }
        }
        return preloadImageDictionary;
    };
    /**
     * Return downscaled URL for default Image. By default Default Images are downloaded as it is on all devices except
     * it is mapped correctly with different image for different device.
     * Now with integration with public CDN and downscale backed by MeTA, we should be able to download required size
     * default image for different screen sizes.
     * If MeTA/Public CND service is not available, it fallbacks to legacy behavior.
     * Note that MeTA response is cached on Akamai that CDN never going to MeTA again except once a year per file per meta Host.
     * Also if File is changed, it's URL is changes thus causing automatic refresh.
     *
     * @param publicImage - URL of public Image where host is onboarded with MeTa. See UrlProvider.cs for include list of hosts
     * https://onedrive.visualstudio.com/OneDrive%20Service/_git/MediaTransformAndAnalysis?path=%2FDataSourceProviders.Implementation%2FUrlProvider.cs&_a=contents&version=GBmaster
     * @param request  - Incodming thumbnail request
     */
    _ThumbnailUrlGenerator.prototype._getPublicCDNMeTAUrl = function (publicImage, request) {
        if (this.mediaCDNBaseUrl) {
            var defaultImagePath = new SPResourcePath_1._SPResourcePath(publicImage);
            if (this._enableStockImageThumbnailFlight()) {
                if (!STOCK_HOST_NAMES.has(defaultImagePath.host) &&
                    defaultImagePath.host !== HUBBLE_STOCK_HOSTNAME &&
                    !this.isLayoutsImage(defaultImagePath.path)) {
                    return publicImage;
                }
            }
            else {
                if (!STOCK_HOST_NAMES.has(defaultImagePath.host) && defaultImagePath.host !== HUBBLE_STOCK_HOSTNAME) {
                    return publicImage;
                }
            }
            var meTAHostUrl = SPAlternativeUrls.tryGetAlternativeUrl(MEDIA_HOST_KEY);
            if (meTAHostUrl) {
                var width = request.width
                    ? PreviewUtility_1._PreviewUtility.normalizeWidth(request.width, true /* isPublicImage*/)
                    : PreviewUtility_2.CACHE_BREAKPOINT_S;
                var fileType = request.fileType || PreviewUtility_1._PreviewUtility.getFileExtension(defaultImagePath);
                // Downscale Image using MeTA
                var metaAuthority = new SPResourcePath_1._SPResourcePath(SPAlternativeUrls.tryGetAlternativeUrl(MEDIA_HOST_KEY));
                // e.g. https://media.akamai.odsp.cdn.office.net/centralus1-mediap.svc.ms/transform/thumbnail?provider=url&inputFormat=jpg&docid=https://spoprod-a.akamaihd.net/files/sp-client/reportDefaultImage1_9c5a39f9e081c6e44e752f1a2791affc.png&w=400
                var publicCdnUrl = "".concat(this.mediaCDNBaseUrl, "/").concat(metaAuthority.domain, "/transform/thumbnail?provider=url&inputFormat=").concat(fileType, "&docid=").concat(encodeURIComponent(publicImage), "&w=").concat(width);
                var isCropModeSpecified = !!request.height && !!request.cropMode && request.cropMode !== CropMode_1.CropMode.Default;
                var isViewportSpecified = this._isViewportParametersSpecified(request);
                if (isCropModeSpecified) {
                    publicCdnUrl = "".concat(publicCdnUrl, "&h=").concat(request.height, "&cm=").concat(request.cropMode);
                }
                else if (request.height) {
                    publicCdnUrl = "".concat(publicCdnUrl, "&h=").concat(request.height);
                }
                if (isViewportSpecified) {
                    publicCdnUrl = "".concat(publicCdnUrl, "&vl=").concat(request.viewportLeft, "&vt=").concat(request.viewportTop, "&vw=").concat(request.viewportWidth, "&vh=").concat(request.viewportHeight);
                }
                return publicCdnUrl;
            }
        }
        return publicImage;
    };
    /**
     * Ensure the preloaded image is close enough to the resolution requirement
     * @param preloadedUrl - Preloaded image Url
     * @param request - Thumbnail request containing resolution requirements
     */
    _ThumbnailUrlGenerator.prototype._validateResolution = function (preloadedUrl, request) {
        if (!preloadedUrl) {
            return false;
        }
        if (!request.width) {
            return true;
        }
        var uri = new SPResourcePath_1._SPResourcePath(preloadedUrl);
        var resolution = uri.searchParams.get('resolution') || undefined;
        if (resolution) {
            var reqResolution = PreviewUtility_1._PreviewUtility.normalizeWidthToResolution(request.width);
            var actualResolution = Number(resolution);
            return this._validateImageProperty(reqResolution, actualResolution, 'Resolution', request.callerId);
        }
        var preloadedlWidth = this.getThumbnailWidth(preloadedUrl);
        if (preloadedlWidth) {
            var requestedWidth = PreviewUtility_1._PreviewUtility.normalizeWidth(request.width);
            return this._validateImageProperty(requestedWidth, preloadedlWidth, 'Width', request.callerId);
        }
        return true;
    };
    _ThumbnailUrlGenerator.prototype._validateImageProperty = function (requestedValue, preloadedlWidth, failureTagProperty, callerId) {
        var failureTagPrefix = 'ImagePreload';
        var failureTag = undefined;
        if (requestedValue === undefined) {
            failureTag = "".concat(failureTagPrefix).concat(failureTagProperty, "Missing");
        }
        else if (!isNaN(preloadedlWidth) && requestedValue > preloadedlWidth) {
            failureTag = "".concat(failureTagPrefix).concat(failureTagProperty, "Mismatch");
        }
        if (failureTag) {
            var qosMonitor = new sp_diagnostics_1._QosMonitor('ImagePreloadMismatch');
            qosMonitor.writeUnexpectedFailure(failureTag);
        }
        return !failureTag;
    };
    _ThumbnailUrlGenerator.prototype._readUrlFromDictionary = function (dictionary, key) {
        try {
            return dictionary[key] || dictionary[decodeURIComponent(key)];
        }
        catch (error) {
            return undefined;
        }
    };
    /**
     * Returns true if given path represents SPO _layouts/15 path including images
     * @param resourcePath - Absolute or relative path of the resource
     */
    _ThumbnailUrlGenerator.prototype._isLayoutsPath = function (resourcePath) {
        return !!resourcePath && resourcePath.toLowerCase().indexOf('/_layouts/15/') > -1;
    };
    /**
     * Rewrite /_layouts/15/images/.. image to media CDN
     * This will serve image from CDN path instead
     * e.g. https://media.akamai.odsp.cdn.office.net/microsoft.sharepoint.com/_layouts/15/images/sitepagethumbnail.png
     * @param request - Requested info about thumbnail
     */
    _ThumbnailUrlGenerator.prototype._rewriteOptimalLayoutsImageUrl = function (request) {
        var resourceLower = request.spResource.toLowerCase();
        var layoutsImagePath = new SPResourcePath_1._SPResourcePath(resourceLower);
        if (layoutsImagePath.format !== SPResourcePath_1._SPResourcePathFormat.absolute) {
            var basePath = new SPResourcePath_1._SPResourcePath(request.absoluteUrl || location.href);
            var relativePath = resourceLower.substring(resourceLower.indexOf('/_layouts/15/'));
            return Uri_1.default.concatenate(this.mediaCDNBaseUrl, basePath.domain, relativePath);
        }
        else {
            var relativePath = layoutsImagePath.path.substring(layoutsImagePath.path.indexOf('/_layouts/15/'));
            return Uri_1.default.concatenate(this.mediaCDNBaseUrl, layoutsImagePath.domain, relativePath);
        }
    };
    /**
     * Extract path from the give URL for given URL provider type
     * If not applicable returns original URL.
     * It is the caller's responsibility to specify the correct provider for given URL.
     *
     * @param provider - Provider type of given thumbnail url
     * @param url - Thumbnail URL from which original path to be extracted if any
     * @returns Extracted path or original URL
     */
    _ThumbnailUrlGenerator.prototype._getPathFromOptimalUrl = function (provider, url) {
        var resourcePath = new SPResourcePath_1._SPResourcePath(url);
        var path = url; // Default is whatever provided as input value
        if (provider === ThumbnailProviderType_1._ThumbnailProviderType.PrivateCDN ||
            provider === ThumbnailProviderType_1._ThumbnailProviderType.PublicCDN ||
            provider === ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNLayoutsImage) {
            path = "https:/".concat(resourcePath.path);
            path = path.split('?')[0]; // Get rid of query param if any
        }
        else if (provider === ThumbnailProviderType_1._ThumbnailProviderType.AFDPrivateCDN) {
            path = "".concat(resourcePath.authority).concat(resourcePath.path.substr(AFDCDN_IMAGE_PATH.length));
            path = path.split('?')[0]; // Get rid of query param if any
        }
        else if (provider === ThumbnailProviderType_1._ThumbnailProviderType.VROOMMeTACache) {
            var sharePointPath = '/sharepoint:/';
            var sharesPath = '/shares/u!';
            var shareDriveItem = '/driveitem/thumbnails/';
            var pathDriveItem = ":".concat(shareDriveItem);
            var lowerUrl = url.toLowerCase();
            var index = lowerUrl.indexOf(sharePointPath);
            var endIndex = index === -1 ? -1 : lowerUrl.indexOf(pathDriveItem);
            if (index > -1 && endIndex > -1) {
                path = url.substring(index + sharePointPath.length - 1, endIndex);
            }
            else {
                index = lowerUrl.indexOf(sharesPath);
                endIndex = index === -1 ? -1 : lowerUrl.indexOf(shareDriveItem);
                if (index > -1 && endIndex > -1) {
                    // Converts from base64 encoded string
                    path = decodeURIComponent(escape(atob(url.substring(index + sharesPath.length, endIndex))));
                }
            }
        }
        else if (provider === ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNDefault ||
            provider === ThumbnailProviderType_1._ThumbnailProviderType.MediaCDNHubble) {
            path = decodeURIComponent(resourcePath.getQueryParameter(DOCID_PARAM));
        }
        else if (provider === ThumbnailProviderType_1._ThumbnailProviderType.DocViz) {
            var pathParam = resourcePath.getQueryParameter('path');
            if (pathParam) {
                pathParam = decodeURIComponent(pathParam);
                pathParam = pathParam[0] === '/' ? pathParam : "/".concat(pathParam); // Ensure begin with /
                path = pathParam;
                // Also add prefix path if any and not already in the path
                var pathPrefix = resourcePath.path.split('/_layouts/15/')[0];
                if (pathPrefix.length > 0) {
                    var index = pathParam.indexOf(pathPrefix);
                    // Handle repeat prefix path in both URL and path query param
                    if (index === -1 || index > 1) {
                        path = "".concat(pathPrefix).concat(pathParam);
                    }
                }
            }
        }
        return path;
    };
    /**
     * Thumbnail URL: https://cdn.hubblecontent.osi.office.net/m365content/publish/01443b10-5551-4c18-8b4f-2c5f969d8ec6/thumbnails/large.jpg?file=gettyimages-543374530.jpg
     * Reconstructed Original URL:https://cdn.hubblecontent.osi.office.net/m365content/publish/01443b10-5551-4c18-8b4f-2c5f969d8ec6/gettyimages-543374530.jpg
     * We use only large.jpg version of thumbnail only. We DO NOT use small medium or xlarge possible variations.
     * If this is a Hubble thumbnail URL (Which is a preview version of original Hubble stock image, and requested width is higher than original URL
     * so optimal URL can be generated for required resolution)
     * Note: It is callers responsibility to ensure request.spResource is hubble thumbnail format.
     *
     * @param request - Thumbnail Request
     * @returns Updated width Media Hubble Url
     */
    _ThumbnailUrlGenerator.prototype._updateHubbleThumbnailWidth = function (request) {
        if (request.width <= 300 || !SPAlternativeUrls.tryGetAlternativeUrl(MEDIA_HOST_KEY)) {
            return request.spResource;
        }
        var cdnResourcePath = new SPResourcePath_1._SPResourcePath(request.spResource);
        var originalHubbleUrl = "".concat(request.spResource.split('/thumbnails/')[0], "/").concat(cdnResourcePath.getQueryParameter('file'));
        return this._getPublicCDNMeTAUrl(originalHubbleUrl, request);
    };
    _ThumbnailUrlGenerator.prototype._enableStockImageThumbnailFlight = function () {
        return sp_core_library_1._SPFlight.isEnabled(60842 /* SPPagesOOBStockImagesThumbnail */);
    };
    return _ThumbnailUrlGenerator;
}());
exports._ThumbnailUrlGenerator = _ThumbnailUrlGenerator;
/**
 * @internal
 */
exports.default = _ThumbnailUrlGenerator.instance;
//# sourceMappingURL=ThumbnailUrlGenerator.js.map