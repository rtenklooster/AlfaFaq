"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.SPLoaderErrorCode = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var strings = tslib_1.__importStar(require("./Error.resx"));
var commonStrings = tslib_1.__importStar(require("../loc/Common.resx"));
/*
 * sp-loader error codes.
 */
var SPLoaderErrorCode;
(function (SPLoaderErrorCode) {
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentMaxRetriesError"] = 0] = "loadComponentMaxRetriesError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentError"] = 1] = "loadComponentError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentReturnsEmptyError"] = 2] = "loadComponentReturnsEmptyError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentReturnsDefaultEmptyError"] = 3] = "loadComponentReturnsDefaultEmptyError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentDependencyError"] = 4] = "loadComponentDependencyError";
    SPLoaderErrorCode[SPLoaderErrorCode["manifestNotFoundError"] = 5] = "manifestNotFoundError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadPathDependencyBlockedByAnotherDependencyError"] = 6] = "loadPathDependencyBlockedByAnotherDependencyError";
    SPLoaderErrorCode[SPLoaderErrorCode["moduleHasUndeclaredDependencyError"] = 7] = "moduleHasUndeclaredDependencyError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadEntryPointError"] = 8] = "loadEntryPointError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadPathDependencyError"] = 9] = "loadPathDependencyError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadComponentDependencyFailoverPathError"] = 10] = "loadComponentDependencyFailoverPathError";
    SPLoaderErrorCode[SPLoaderErrorCode["loadScriptWithStringError"] = 11] = "loadScriptWithStringError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusLocalhostFileNotFoundError"] = 12] = "urlStatusLocalhostFileNotFoundError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusFileNotFoundError"] = 13] = "urlStatusFileNotFoundError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusForbiddenError"] = 14] = "urlStatusForbiddenError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusClientErrorError"] = 15] = "urlStatusClientErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusServerErrorError"] = 16] = "urlStatusServerErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusLocalhostNetworkErrorError"] = 17] = "urlStatusLocalhostNetworkErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusDocLibNetworkErrorError"] = 18] = "urlStatusDocLibNetworkErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusHttpsNetworkErrorError"] = 19] = "urlStatusHttpsNetworkErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusNetworkErrorError"] = 20] = "urlStatusNetworkErrorError";
    SPLoaderErrorCode[SPLoaderErrorCode["urlStatusUndefinedError"] = 21] = "urlStatusUndefinedError";
    SPLoaderErrorCode[SPLoaderErrorCode["failedToCreateGlobalVariable"] = 22] = "failedToCreateGlobalVariable";
    SPLoaderErrorCode[SPLoaderErrorCode["dependencyLoadError"] = 23] = "dependencyLoadError";
    SPLoaderErrorCode[SPLoaderErrorCode["missingPathDependencyError"] = 24] = "missingPathDependencyError";
})(SPLoaderErrorCode = exports.SPLoaderErrorCode || (exports.SPLoaderErrorCode = {}));
/**
 * sp-loader errors.
 *
 * @internal
 */
var SPLoaderError = /** @class */ (function (_super) {
    tslib_1.__extends(SPLoaderError, _super);
    function SPLoaderError(errorCode, innerError, isExpected) {
        var params = []; // tslint:disable-line:no-any
        for (var _i = 3 // tslint:disable-line:no-any
        ; _i < arguments.length // tslint:disable-line:no-any
        ; _i++ // tslint:disable-line:no-any
        ) {
            params[_i - 3] = arguments[_i]; // tslint:disable-line:no-any
        }
        var _this = _super.call(this, SPLoaderErrorCode[errorCode], sp_core_library_1.Text.format.apply(sp_core_library_1.Text, tslib_1.__spreadArray([SPLoaderError._errorCodeToMessageMap.get(errorCode)], params, false))) || this;
        _this._isExpected = false;
        // Manually set the prototype, as we can no longer extend built-in classes like Error, Array, Map, etc
        // [https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work](https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work)
        //
        // Note: the prototype must also be set on any classes which extend this one
        _this.__proto__ = SPLoaderError.prototype; // tslint:disable-line:no-any
        _this._loaderErrorCode = errorCode;
        _this.innerError = innerError;
        // If the inner error is expected, the error is expected.
        // Otherwise, look at the flag, or set the default to false.
        if (_this.innerError instanceof SPLoaderError) {
            _this._isExpected = _this.innerError.isExpected;
        }
        _this._isExpected = _this._isExpected || isExpected || false;
        return _this;
    }
    Object.defineProperty(SPLoaderError.prototype, "id", {
        /**
         * Error id.
         */
        get: function () {
            return this._loaderErrorCode;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPLoaderError.prototype, "category", {
        /**
         * Error category.
         */
        get: function () {
            return 'SPLoaderError';
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(SPLoaderError.prototype, "isExpected", {
        /**
         * True if the error is an expected error.
         * This can happen when it's surfacing an error that happened in the loader,
         * or there is a transient network problem.
         */
        get: function () {
            return this._isExpected;
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Error id to string map
     */
    SPLoaderError._errorCodeToMessageMap = new Map([
        [SPLoaderErrorCode.loadComponentMaxRetriesError, commonStrings.loadComponentMaxRetriesError],
        [SPLoaderErrorCode.loadComponentError, strings.loadComponentError],
        [SPLoaderErrorCode.loadComponentReturnsEmptyError, strings.loadComponentReturnsEmptyError],
        [
            SPLoaderErrorCode.loadComponentReturnsDefaultEmptyError,
            strings.loadComponentReturnsDefaultEmptyError
        ],
        [SPLoaderErrorCode.loadComponentDependencyError, strings.loadComponentDependencyError],
        [SPLoaderErrorCode.manifestNotFoundError, commonStrings.manifestNotFoundError],
        [
            SPLoaderErrorCode.loadPathDependencyBlockedByAnotherDependencyError,
            strings.loadPathDependencyBlockedByAnotherDependencyError
        ],
        [SPLoaderErrorCode.moduleHasUndeclaredDependencyError, strings.moduleHasUndeclaredDependencyError],
        [SPLoaderErrorCode.loadEntryPointError, strings.loadEntryPointError],
        [SPLoaderErrorCode.loadPathDependencyError, strings.loadPathDependencyError],
        [
            SPLoaderErrorCode.loadComponentDependencyFailoverPathError,
            strings.loadComponentDependencyFailoverPathError
        ],
        [SPLoaderErrorCode.loadScriptWithStringError, strings.loadScriptWithStringError],
        [SPLoaderErrorCode.urlStatusLocalhostFileNotFoundError, strings.urlStatusLocalhostFileNotFoundError],
        [SPLoaderErrorCode.urlStatusFileNotFoundError, strings.urlStatusFileNotFoundError],
        [SPLoaderErrorCode.urlStatusForbiddenError, strings.urlStatusForbiddenError],
        [SPLoaderErrorCode.urlStatusClientErrorError, strings.urlStatusClientErrorError],
        [SPLoaderErrorCode.urlStatusServerErrorError, strings.urlStatusServerErrorError],
        [SPLoaderErrorCode.urlStatusLocalhostNetworkErrorError, strings.urlStatusLocalhostNetworkErrorError],
        // Note that the doclib error shows the standard network error message
        [SPLoaderErrorCode.urlStatusDocLibNetworkErrorError, strings.urlStatusNetworkErrorError],
        [SPLoaderErrorCode.urlStatusHttpsNetworkErrorError, strings.urlStatusHttpsNetworkErrorError],
        [SPLoaderErrorCode.urlStatusNetworkErrorError, strings.urlStatusNetworkErrorError],
        [SPLoaderErrorCode.urlStatusUndefinedError, strings.urlStatusUndefinedError],
        [SPLoaderErrorCode.failedToCreateGlobalVariable, strings.failedToCreateGlobalVariableError],
        [SPLoaderErrorCode.dependencyLoadError, strings.dependencyLoadError],
        [SPLoaderErrorCode.missingPathDependencyError, strings.missingPathDependencyError]
    ] /* fix this typecast, VSO:397687 */);
    return SPLoaderError;
}(sp_core_library_1.SPError));
exports.default = SPLoaderError;
//# sourceMappingURL=SPLoaderError.js.map