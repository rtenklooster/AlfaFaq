"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CacheManager = void 0;
var tslib_1 = require("tslib");
var getCardRenderParameters_1 = require("../ac-template/util/getCardRenderParameters");
var CacheManager = /** @class */ (function () {
    function CacheManager(_context, _getCardSize, _getIconProperty, _getTitle, _handleInitializeCallback, overriddenSettings) {
        this._context = _context;
        this._getCardSize = _getCardSize;
        this._getIconProperty = _getIconProperty;
        this._getTitle = _getTitle;
        this._handleInitializeCallback = _handleInitializeCallback;
        this._settings = tslib_1.__assign(tslib_1.__assign({}, this._defaultCacheSettings()), overriddenSettings);
    }
    CacheManager.prototype.save = function (cacheKey, instanceId, currentCardView, renderParameters, cardNavigatorState, cachedState) {
        var _a;
        var cacheObject;
        if (this._settings.isEnabled) {
            var customCacheCardView = this._initializeCustomCardView();
            if ((customCacheCardView && customCacheCardView.isCacheEnabled) ||
                (!customCacheCardView && currentCardView.isCacheEnabled)) {
                // If the ACE has a custom card view for creating the cached card, use it to generate the cached card.
                var card = customCacheCardView
                    ? (0, getCardRenderParameters_1.getCardRenderParameters)(customCacheCardView, this._getCardSize(), this._context.deviceContext, undefined, this._getIconProperty(), this._getTitle())
                    : renderParameters.card;
                cacheObject = this._createCacheObject(renderParameters, card, cardNavigatorState, cachedState);
                (_a = this._context._host.cache) === null || _a === void 0 ? void 0 : _a.save(cacheKey, instanceId, cacheObject);
            }
        }
        return cacheObject;
    };
    CacheManager.prototype._createCacheObject = function (renderParameters, cardRenderParameters, cardNavigatorState, cachedState) {
        return {
            cachedCard: cardRenderParameters,
            cardNavigatorState: cardNavigatorState,
            isVisible: renderParameters.isVisible,
            cachedState: cachedState,
            expirationTime: new Date().getTime() + this._settings.expiryTimeInSeconds * 1000
        };
    };
    CacheManager.prototype._initializeCustomCardView = function () {
        if (this._settings.cachedCardView) {
            var customCacheCardView = this._settings.cachedCardView();
            this._handleInitializeCallback(customCacheCardView);
            return customCacheCardView;
        }
        return undefined;
    };
    CacheManager.prototype._defaultCacheSettings = function () {
        return {
            isEnabled: true,
            expiryTimeInSeconds: CacheManager.CACHE_EXPIRATION_TIME,
            cachedCardView: undefined
        };
    };
    CacheManager.CACHE_EXPIRATION_TIME = 864000; // 10 days
    return CacheManager;
}());
exports.CacheManager = CacheManager;
//# sourceMappingURL=CacheManager.js.map