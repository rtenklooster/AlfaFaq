"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.OboTokenProvider = void 0;
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var utilities_jwt_1 = require("@ms/utilities-jwt");
var SPHttpClient_1 = tslib_1.__importDefault(require("../../../spHttpClient/SPHttpClient"));
var AadConstants_1 = tslib_1.__importDefault(require("../../AadConstants"));
var AadErrorHandler_1 = require("../../AadErrorHandler");
var MSAL_UI_REQUIRED_EXCEPTION_TEXT = 'Microsoft.Identity.Client.MsalUiRequiredException';
/**
 * Class that wraps the ADAL's authentication class
 * @internal
 */
var OboTokenProvider = /** @class */ (function () {
    function OboTokenProvider(authContext, tokenParameters, _oboFirstPartyTokenCallback, _oboThirdPartyTokenCallback) {
        var _this = this;
        this._oboFirstPartyTokenCallback = _oboFirstPartyTokenCallback;
        this._oboThirdPartyTokenCallback = _oboThirdPartyTokenCallback;
        this._exchange1PTokenFor3P = function (claims, refresh) {
            if (_this._oboFirstPartyTokenCallback) {
                if (!_this._oboFirstPartyTokenRequest || refresh) {
                    _this._oboFirstPartyTokenRequest = _this._oboFirstPartyTokenCallback(claims, refresh)
                        .then(function (firstPartyToken) {
                        if (!firstPartyToken) {
                            throw new Error('_oboFirstPartyTokenCallback returned empty token');
                        }
                        if (_this._isTokenExpired(firstPartyToken)) {
                            if (refresh) {
                                throw new Error('Failed to refresh an expired token');
                            }
                            else {
                                return _this._oboFirstPartyTokenCallback(claims, true);
                            }
                        }
                        else {
                            return Promise.resolve(firstPartyToken);
                        }
                    })
                        .then(function (unexpiredToken) {
                        if (!unexpiredToken) {
                            throw new Error('_oboFirstPartyTokenCallback returned empty token');
                        }
                        var urlToCall = "".concat(_this._serverRelativeUrl, "/_api/Microsoft.SharePoint.Internal") +
                            ".ClientSideComponent.Token.AcquireOBOToken?resource='".concat(_this._authContext.config.clientId, "'") +
                            "&clientId='".concat(AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID, "'");
                        var requestInfo = {
                            headers: {
                                'X-HTTP-Method': 'GET',
                                'OData-Version': '3.0',
                                OBOToken: unexpiredToken,
                                ClientId: AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID,
                                Resource: _this._authContext.config.clientId
                            }
                        };
                        return _this._spHttpClient.get(urlToCall, SPHttpClient_1.default.configurations.v1, requestInfo);
                    })
                        .then(function (response) {
                        if (response.ok) {
                            return response.json();
                        }
                        else if (response.status === 500) {
                            return response.json().then(function (errorJson) {
                                var _a;
                                var responseMessage = (_a = errorJson['odata.error']) === null || _a === void 0 ? void 0 : _a.code;
                                if (responseMessage && responseMessage.indexOf(MSAL_UI_REQUIRED_EXCEPTION_TEXT) > -1) {
                                    sp_diagnostics_1._TraceLogger.logError(OboTokenProvider._logSource, new Error('Please update your web application info to be {teamSiteDomain} as per https://docs.microsoft.com/en-us/sharepoint/dev/spfx/deployment-spfx-teams-solutions'));
                                }
                                return Promise.reject(errorJson['odata.error']);
                            });
                        }
                        else {
                            return Promise.reject(response.json());
                        }
                    })
                        .then(function (json) { return JSON.parse(json.value).AccessToken; })
                        .catch(function (e) {
                        // If the request failed, clear this cache to retry
                        _this._oboFirstPartyTokenRequest = undefined;
                        throw e;
                    });
                }
                return _this._oboFirstPartyTokenRequest;
            }
            return Promise.reject();
        };
        this.servicePrincipalId = authContext.config.clientId;
        this._patchAdalAuthContext(authContext);
        this._authContext = authContext;
        this._serverRelativeUrl = tokenParameters.serverRelativeUrl;
        this._spHttpClient = tokenParameters.spHttpClient;
        this._cachedTokens = new Map();
    }
    OboTokenProvider.prototype.getToken = function (resourceEndpoint, optionsOrUseCachedToken) {
        if (optionsOrUseCachedToken === void 0) { optionsOrUseCachedToken = true; }
        var options = optionsOrUseCachedToken && typeof optionsOrUseCachedToken === 'object'
            ? optionsOrUseCachedToken
            : {
                useCachedToken: optionsOrUseCachedToken
            };
        var _a = options.useCachedToken, useCachedToken = _a === void 0 ? true : _a, claims = options.claims;
        var acquireAccessTokenQosMonitor = new sp_diagnostics_1._QosMonitor('OboTokenProvider.GetToken');
        return this._getAccessToken(resourceEndpoint, useCachedToken, claims)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            acquireAccessTokenQosMonitor.writeUnexpectedFailure('TokenAcquisitionFailure', e);
            throw e;
        });
    };
    OboTokenProvider.prototype._getAccessToken = function (resourceEndpoint, useCachedToken, claims) {
        var _this = this;
        if (useCachedToken && !claims) {
            if (!sp_core_library_1._SPKillSwitch.isActivated('fe22e094-281c-4b1d-8411-608af6d95172'
            /*'08/18/2022',
            'Check for cached tokens synchronously'*/
            )) {
                var cachedAccessToken = this._tryGetCachedAccessToken(resourceEndpoint);
                if (cachedAccessToken) {
                    return cachedAccessToken.then(function (token) {
                        if (token && !_this._isTokenExpired(token)) {
                            return Promise.resolve(token);
                        }
                        else {
                            return _this._fetchAccessToken(resourceEndpoint);
                        }
                    });
                }
                else {
                    return this._fetchAccessToken(resourceEndpoint, claims);
                }
            }
            else {
                var cachedAccessToken = this._tryGetCachedAccessTokenOld(resourceEndpoint);
                return cachedAccessToken.then(function (token) {
                    if (token && !_this._isTokenExpired(token)) {
                        return Promise.resolve(token);
                    }
                    else {
                        return _this._fetchAccessToken(resourceEndpoint);
                    }
                });
            }
        }
        else {
            return this._fetchAccessToken(resourceEndpoint, claims);
        }
    };
    /**
     * Returns an access token if a valid cached token exists
     */
    OboTokenProvider.prototype._tryGetCachedAccessTokenOld = function (resourceEndpoint) {
        var cachedToken = this._cachedTokens.get(resourceEndpoint);
        if (cachedToken) {
            return cachedToken;
        }
        else {
            return Promise.resolve(undefined);
        }
    };
    /**
     * Returns an access token if a valid cached token exists
     */
    OboTokenProvider.prototype._tryGetCachedAccessToken = function (resourceEndpoint) {
        var cachedToken = this._cachedTokens.get(resourceEndpoint);
        if (cachedToken) {
            return cachedToken;
        }
        else {
            return undefined;
        }
    };
    /**
     * See the following link for details about handling conditional access policies.
     * https://docs.microsoft.com/en-us/azure/active-directory/develop/active-directory-conditional-access-developer
     */
    OboTokenProvider.prototype._fetchAccessToken = function (resourceEndpoint, claims) {
        var acquireAccessTokenQosMonitor = new sp_diagnostics_1._QosMonitor('OboTokenProvider.FetchAccessToken');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var extraLogData = {
            usedNewAuth: false
        };
        // Attempt to fetch a new access token
        this._cachedTokens.set(resourceEndpoint, this._fetchAccessTokenSilent(resourceEndpoint, extraLogData, claims ? [claims] : undefined)
            .then(function (token) {
            acquireAccessTokenQosMonitor.writeSuccess();
            return token;
        })
            .catch(function (e) {
            if (e.message &&
                AadErrorHandler_1.AadErrorHandler._doesAadErrorCodeExist(e.message, AadConstants_1.default.EXPECTED_AAD_ERRORS)) {
                acquireAccessTokenQosMonitor.writeExpectedFailure('TokenAcquisitionFailure', e, extraLogData);
            }
            else {
                acquireAccessTokenQosMonitor.writeUnexpectedFailure('TokenAcquisitionFailure', e, extraLogData);
            }
            throw e;
        }));
        return this._cachedTokens.get(resourceEndpoint);
    };
    OboTokenProvider.prototype._getOboAuthToken = function (claims, refresh) {
        var _this = this;
        if (!this._oboFirstPartyTokenCallback && !this._oboThirdPartyTokenCallback) {
            // If the callbacks have not been sent we want to use the old acquire and not log a failed QoS
            return Promise.resolve('');
        }
        var acquireOboTokenMonitor = new sp_diagnostics_1._QosMonitor(!refresh ? 'OboTokenProvider.GetOboAuthToken' : 'OboTokenProvider.GetOboAuthTokenRetry');
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        var extraLogData = {
            IsClaimsPresent: !!claims,
            IsRefreshOboAuthTokenFlow: !!refresh
        };
        var clientId = this._authContext.config.clientId;
        var retVal = Promise.resolve(undefined);
        if (clientId === AadConstants_1.default.PRE_AUTHORIZED_APP_PRINCIPAL_ID && this._oboFirstPartyTokenCallback) {
            retVal = this._oboFirstPartyTokenCallback(claims, refresh);
        }
        else if (this._oboThirdPartyTokenCallback) {
            // If we can't get a 3P token then try to exchange a 1P token for the 3P token
            retVal = this._oboThirdPartyTokenCallback(this._authContext.config.clientId, claims, refresh).catch(function () { return _this._exchange1PTokenFor3P(claims, refresh); });
        }
        else {
            retVal = this._exchange1PTokenFor3P(claims, refresh);
        }
        return retVal
            .then(function (token) {
            if (_this._isTokenExpired(token, extraLogData)) {
                if (refresh) {
                    throw new Error('Failed to refresh an expired token');
                }
                else {
                    return _this._getOboAuthToken(claims, true);
                }
            }
            else {
                acquireOboTokenMonitor.writeSuccess(extraLogData);
                return token;
            }
        })
            .catch(function (e) {
            if (e && e.code && e.code.indexOf(MSAL_UI_REQUIRED_EXCEPTION_TEXT) > -1) {
                acquireOboTokenMonitor.writeExpectedFailure(undefined, e, extraLogData);
            }
            else {
                acquireOboTokenMonitor.writeUnexpectedFailure(undefined, e, extraLogData);
            }
            // Default to not doing OBO if we fail to acquire a token.
            return '';
        });
    };
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    OboTokenProvider.prototype._isTokenExpired = function (token, extraLogData) {
        if (token !== undefined) {
            var claims = (0, utilities_jwt_1.parseTokenPayload)(token);
            if (extraLogData) {
                extraLogData.TokenExpiration = claims.exp ? claims.exp * 1000 : -1;
                extraLogData.TimeCheckingTokenExpiration = Date.now();
            }
            return !(0, utilities_jwt_1.isTokenValid)(claims);
        }
        return false;
    };
    /**
     * Wraps the ADAL.js callback code with a promise.
     */
    OboTokenProvider.prototype._fetchAccessTokenSilent = function (resourceEndpoint, 
    // eslint-disable-next-line @typescript-eslint/no-explicit-any
    extraLogData, claims) {
        var _this = this;
        return this._getOboAuthToken(claims).then(function (oboAuthToken) {
            var urlToCall = "".concat(_this._serverRelativeUrl, "/_api/Microsoft.SharePoint.Internal") +
                ".ClientSideComponent.Token.AcquireOBOToken?resource='".concat(resourceEndpoint, "'") +
                "&clientId='".concat(_this._authContext.config.clientId, "'");
            var requestInfo = {
                headers: {
                    'X-HTTP-Method': 'GET',
                    'OData-Version': '3.0'
                }
            };
            if (oboAuthToken) {
                // eslint-disable-next-line dot-notation
                requestInfo.headers['OBOToken'] = oboAuthToken;
                extraLogData.usedNewAuth = true;
            }
            requestInfo.headers = tslib_1.__assign(tslib_1.__assign({}, requestInfo.headers), { ClientId: _this._authContext.config.clientId, Resource: resourceEndpoint });
            return _this._spHttpClient
                .get(urlToCall, SPHttpClient_1.default.configurations.v1, requestInfo)
                .then(function (response) {
                if (response.ok) {
                    return response.json();
                }
                else {
                    if (response.status === 401) {
                        // Authenticate header will look like this:
                        // `Bearer realm="7fe4c4f2-31c2-4651-bdfd-b7692b373e02",client_id="00000003-0000-0ff1-ce00-000000000000",trusted_issuers="D3776938-3DBA-481F-A652-4BEDFCAB7CD8@*,https://sts.windows-ppe.net/*/,00000003-0000-0ff1-ce00-000000000000@90140122-8516-11e1-8eff-49304924019b",authorization_uri="https://login.windows-ppe.net/common/oauth2/authorize",error="insufficient_claims",claims="eyJhY2Nlc3NfdG9rZW4iOnsiY2Fwb2xpZHMiOnsiZXNzZW50aWFsIjp0cnVlLCJ2YWx1ZXMiOlsiNGE0YzkwOWItYzdiNi00MWQxLWE3MzQtZTA2MzRiNTJjOGU1Il19fX0="`;
                        var authenticateHeader = response.headers.get('WWW-Authenticate');
                        if (!claims && authenticateHeader) {
                            var requiredClaims = void 0;
                            if (!sp_core_library_1._SPKillSwitch.isActivated('d802e1d2-b1d5-4527-818b-d43ec3733f45'
                            /* '08/08/2022',
                                'Get Required Claims from utility function'*/
                            )) {
                                requiredClaims = sp_core_library_1.ResponseUtilities.getRequiredClaims(authenticateHeader);
                            }
                            else {
                                requiredClaims = authenticateHeader
                                    .split(',')
                                    .map(function (nameValue) {
                                    var equalIndex = nameValue.indexOf('=');
                                    return [nameValue.substr(0, equalIndex), nameValue.substr(equalIndex + 1)];
                                })
                                    .filter(function (nameValueArray) { return nameValueArray[0] === 'claims'; })[0][1]
                                    // Claims is base 64 encoded and includes quotes, this strips out the quotes (which is not a base 64 encoded value so no worries of changing the data)
                                    .replace(/"/g, '');
                            }
                            return _this._fetchAccessTokenSilent(resourceEndpoint, extraLogData, [requiredClaims]);
                        }
                    }
                    return response
                        .json()
                        .then(function (jsonBody) { var _a, _b; return Promise.reject((_b = (_a = jsonBody['odata.error']) === null || _a === void 0 ? void 0 : _a.message) === null || _b === void 0 ? void 0 : _b.value); });
                }
            })
                .then(function (json) {
                if (typeof json === 'string') {
                    // If this is the response from a recursive call to _fetchAccessTokenSilent we just want to return
                    return json;
                }
                else {
                    return JSON.parse(json.value).AccessToken;
                }
            });
        });
    };
    /**
     * Adal creates an iframe without the sandbox attribute.
     * Adal assumes it's being used as a singleton but this will not work for our scenario.
     */
    OboTokenProvider.prototype._patchAdalAuthContext = function (authContext) {
        Object.getPrototypeOf(authContext)._singletonInstance = undefined;
    };
    OboTokenProvider._logSource = sp_diagnostics_1._LogSource.create('OBOTokenProvider');
    return OboTokenProvider;
}());
exports.OboTokenProvider = OboTokenProvider;
//# sourceMappingURL=OboTokenProvider.js.map