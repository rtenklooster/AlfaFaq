"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var tslib_1 = require("tslib");
var sp_core_library_1 = require("@microsoft/sp-core-library");
var sp_diagnostics_1 = require("@microsoft/sp-diagnostics");
var ms_graph_v3_bundle_1 = require("@ms/ms-graph-v3-bundle");
var sp_http_base_1 = require("@microsoft/sp-http-base");
/**
 * MSGraphClient is used to perform REST calls against Microsoft Graph.
 *
 * @remarks The Microsoft Graph JavaScript client library is a lightweight wrapper around the
 * Microsoft Graph API. This class allows developers to start making REST calls to MSGraph without
 * needing to initialize the the MSGraph client library. If a custom configuration is desired,
 * the MSGraphClient api function needs to be provided with that custom configuration for
 * every request.
 *
 * For more information: {@link https://github.com/microsoftgraph/msgraph-sdk-javascript}
 *
 * @public
 */
var MSGraphClientV3 = /** @class */ (function () {
    /**
     * @param serviceScope - Provides services for the MSGraphClient to consume.
     *
     * @internal
     */
    function MSGraphClientV3(serviceScope, options, clientOptions) {
        var _this = this;
        serviceScope.whenFinished(function () {
            MSGraphClientV3._graphBaseUrl = serviceScope
                .consume(sp_http_base_1._GraphHttpClientContext.serviceKey)
                .getGraphEndpointUrl();
            if (!MSGraphClientV3._instance) {
                if (clientOptions !== undefined) {
                    MSGraphClientV3._instance = _this._createGraphClientInstanceWithMiddleware(sp_http_base_1._AadTokenProviders.configurable, clientOptions);
                }
                else {
                    MSGraphClientV3._instance = _this._createGraphClientInstance(sp_http_base_1._AadTokenProviders.configurable, options);
                }
            }
        });
    }
    /**
     * All calls to Microsoft Graph are chained together starting with the api function.
     *
     * @remarks Path supports the following formats:
     * * me
     * * /me
     * * https://graph.microsoft.com/v1.0/me
     * * https://graph.microsoft.com/beta/me
     * * me/events?$filter=startswith(subject, 'ship')
     *
     * The authProvider and baseUrl option should not be used, as they have already been
     * provided by the framework. See the official documentation here:
     * https://github.com/microsoftgraph/msgraph-sdk-javascript
     *
     * @param path - The path for the request to MSGraph.
     */
    MSGraphClientV3.prototype.api = function (path) {
        sp_core_library_1.Validate.isNonemptyString(path, 'path');
        return MSGraphClientV3._instance.api(path);
    };
    Object.defineProperty(MSGraphClientV3.prototype, "client", {
        /**
         * Gets the instance of the instantiated Client object from Microsoft Graph SDK.
         */
        get: function () {
            return MSGraphClientV3._instance;
        },
        enumerable: false,
        configurable: true
    });
    MSGraphClientV3.prototype._createGraphClientInstance = function (tokenProvider, options) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstance');
        var graphClient = ms_graph_v3_bundle_1.Client.init(tslib_1.__assign({ authProvider: function (done) {
                _this._getOAuthToken(tokenProvider)
                    .then(function (token) {
                    done(undefined /** error object */, token);
                    qosMonitor.writeSuccess();
                })
                    .catch(function (e) {
                    // The functions will return a rejected promise if it fails to get an OAuth2Token.
                    done(e, '');
                    qosMonitor.writeExpectedFailure(e.message);
                });
            }, baseUrl: MSGraphClientV3._graphBaseUrl }, options // with this, the user can override the baseUrl and authProvider too
        ));
        return graphClient;
    };
    MSGraphClientV3.prototype._createGraphClientInstanceWithMiddleware = function (tokenProvider, options) {
        var _this = this;
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClientV3.CreateGraphClientInstanceWithMiddleware');
        try {
            var graphClient = ms_graph_v3_bundle_1.Client.initWithMiddleware(tslib_1.__assign({ authProvider: {
                    getAccessToken: function (authenticationProviderOptions) {
                        return _this._getOAuthToken(tokenProvider);
                    }
                }, baseUrl: MSGraphClientV3._graphBaseUrl }, options // with this, the user can override the baseUrl and authProvider too
            ));
            qosMonitor.writeSuccess();
            return graphClient;
        }
        catch (e) {
            qosMonitor.writeUnexpectedFailure('CreateGraphClientInstanceWithMiddleware', e);
            throw e;
        }
    };
    MSGraphClientV3.prototype._getOAuthToken = function (tokenProvider) {
        var qosMonitor = new sp_diagnostics_1._QosMonitor('MSGraphClient.FetchGraphToken');
        return tokenProvider
            .getToken(MSGraphClientV3._graphBaseUrl)
            .then(function (response) {
            qosMonitor.writeSuccess();
            return response;
        })
            .catch(function (error) {
            qosMonitor.writeUnexpectedFailure('FetchGraphToken', error);
            throw error;
        });
    };
    return MSGraphClientV3;
}());
exports.default = MSGraphClientV3;
//# sourceMappingURL=MSGraphClientV3.js.map